# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import json
import sys
from typing import Any, Callable, Dict, IO, Optional, TypeVar, Union, cast, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.polling import AsyncLROPoller, AsyncNoPolling, AsyncPollingMethod
from azure.core.polling.async_base_polling import AsyncLROBasePolling
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ... import models as _models
from ..._model_base import AzureJSONEncoder, _deserialize
from ..._validation import api_version_validation
from ...operations._operations import (
    build_audio_transcription_request,
    build_audio_translation_request,
    build_chat_completions_create_extensions_request,
    build_chat_completions_create_request,
    build_completions_create_request,
    build_embeddings_create_request,
    build_images_generate_request,
)

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class CompletionsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.openai.aio.OpenAIClient`'s
        :attr:`completions` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    async def _create(  # pylint: disable=protected-access
        self,
        deployment_id: str,
        body: _models._models.CompletionsOptions,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models._models.Completions:
        ...

    @overload
    async def _create(  # pylint: disable=protected-access
        self, deployment_id: str, body: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models._models.Completions:
        ...

    @overload
    async def _create(  # pylint: disable=protected-access
        self, deployment_id: str, body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models._models.Completions:
        ...

    @distributed_trace_async
    async def _create(  # pylint: disable=protected-access
        self, deployment_id: str, body: Union[_models._models.CompletionsOptions, JSON, IO], **kwargs: Any
    ) -> _models._models.Completions:
        """Gets completions for the provided input prompts.
        Completions support a wide variety of tasks and generate text that continues from or
        "completes"
        provided prompt data.

        :param deployment_id: Specifies either the model deployment name (when using Azure OpenAI) or
         model name (when using non-Azure OpenAI) to use for this request. Required.
        :type deployment_id: str
        :param body: Is one of the following types: CompletionsOptions, JSON, IO Required.
        :type body: ~azure.openai.models.CompletionsOptions or JSON or IO
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: Completions. The Completions is compatible with MutableMapping
        :rtype: ~azure.openai.models.Completions
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models._models.Completions] = kwargs.pop("cls", None)  # pylint: disable=protected-access

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=AzureJSONEncoder, exclude_readonly=True)  # type: ignore

        request = build_completions_create_request(
            deployment_id=deployment_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(
                _models._models.Completions, response.json()  # pylint: disable=protected-access
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore


class ChatCompletionsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.openai.aio.OpenAIClient`'s
        :attr:`chat_completions` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    @api_version_validation(
        method_added_on="2023-05-15",
    )  # pylint: disable=protected-access
    async def _create(  # pylint: disable=protected-access
        self,
        deployment_id: str,
        body: _models._models.ChatCompletionsOptions,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models._models.ChatCompletions:
        ...

    @overload
    @api_version_validation(
        method_added_on="2023-05-15",
    )  # pylint: disable=protected-access
    async def _create(  # pylint: disable=protected-access
        self, deployment_id: str, body: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models._models.ChatCompletions:
        ...

    @overload
    @api_version_validation(
        method_added_on="2023-05-15",
    )  # pylint: disable=protected-access
    async def _create(  # pylint: disable=protected-access
        self, deployment_id: str, body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models._models.ChatCompletions:
        ...

    @distributed_trace_async
    @api_version_validation(
        method_added_on="2023-05-15",
    )  # pylint: disable=protected-access
    async def _create(  # pylint: disable=protected-access
        self, deployment_id: str, body: Union[_models._models.ChatCompletionsOptions, JSON, IO], **kwargs: Any
    ) -> _models._models.ChatCompletions:
        """Gets chat completions for the provided chat messages.
        Completions support a wide variety of tasks and generate text that continues from or
        "completes"
        provided prompt data.

        :param deployment_id: Specifies either the model deployment name (when using Azure OpenAI) or
         model name (when using non-Azure OpenAI) to use for this request. Required.
        :type deployment_id: str
        :param body: Is one of the following types: ChatCompletionsOptions, JSON, IO Required.
        :type body: ~azure.openai.models.ChatCompletionsOptions or JSON or IO
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: ChatCompletions. The ChatCompletions is compatible with MutableMapping
        :rtype: ~azure.openai.models.ChatCompletions
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models._models.ChatCompletions] = kwargs.pop("cls", None)  # pylint: disable=protected-access

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=AzureJSONEncoder, exclude_readonly=True)  # type: ignore

        request = build_chat_completions_create_request(
            deployment_id=deployment_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(
                _models._models.ChatCompletions, response.json()  # pylint: disable=protected-access
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    @api_version_validation(
        method_added_on="2023-08-01-preview",
    )  # pylint: disable=protected-access
    async def _create_extensions(  # pylint: disable=protected-access
        self,
        deployment_id: str,
        body: _models._models.ChatCompletionsOptions,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models._models.ChatCompletions:
        ...

    @overload
    @api_version_validation(
        method_added_on="2023-08-01-preview",
    )  # pylint: disable=protected-access
    async def _create_extensions(  # pylint: disable=protected-access
        self, deployment_id: str, body: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models._models.ChatCompletions:
        ...

    @overload
    @api_version_validation(
        method_added_on="2023-08-01-preview",
    )  # pylint: disable=protected-access
    async def _create_extensions(  # pylint: disable=protected-access
        self, deployment_id: str, body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models._models.ChatCompletions:
        ...

    @distributed_trace_async
    @api_version_validation(
        method_added_on="2023-08-01-preview",
    )  # pylint: disable=protected-access
    async def _create_extensions(  # pylint: disable=protected-access
        self, deployment_id: str, body: Union[_models._models.ChatCompletionsOptions, JSON, IO], **kwargs: Any
    ) -> _models._models.ChatCompletions:
        """Gets chat completions for the provided chat messages.
        This is an Azure-specific version of chat completions that supports integration with configured
        data sources and
        other augmentations to the base chat completions capabilities.

        :param deployment_id: Specifies either the model deployment name (when using Azure OpenAI) or
         model name (when using non-Azure OpenAI) to use for this request. Required.
        :type deployment_id: str
        :param body: Is one of the following types: ChatCompletionsOptions, JSON, IO Required.
        :type body: ~azure.openai.models.ChatCompletionsOptions or JSON or IO
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: ChatCompletions. The ChatCompletions is compatible with MutableMapping
        :rtype: ~azure.openai.models.ChatCompletions
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models._models.ChatCompletions] = kwargs.pop("cls", None)  # pylint: disable=protected-access

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=AzureJSONEncoder, exclude_readonly=True)  # type: ignore

        request = build_chat_completions_create_extensions_request(
            deployment_id=deployment_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(
                _models._models.ChatCompletions, response.json()  # pylint: disable=protected-access
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore


class EmbeddingsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.openai.aio.OpenAIClient`'s
        :attr:`embeddings` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    async def _create(  # pylint: disable=protected-access
        self,
        deployment_id: str,
        body: _models._models.EmbeddingsOptions,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models._models.Embeddings:
        ...

    @overload
    async def _create(  # pylint: disable=protected-access
        self, deployment_id: str, body: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models._models.Embeddings:
        ...

    @overload
    async def _create(  # pylint: disable=protected-access
        self, deployment_id: str, body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models._models.Embeddings:
        ...

    @distributed_trace_async
    async def _create(  # pylint: disable=protected-access
        self, deployment_id: str, body: Union[_models._models.EmbeddingsOptions, JSON, IO], **kwargs: Any
    ) -> _models._models.Embeddings:
        """Return the embeddings for a given prompt.

        :param deployment_id: Specifies either the model deployment name (when using Azure OpenAI) or
         model name (when using non-Azure OpenAI) to use for this request. Required.
        :type deployment_id: str
        :param body: Is one of the following types: EmbeddingsOptions, JSON, IO Required.
        :type body: ~azure.openai.models.EmbeddingsOptions or JSON or IO
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: Embeddings. The Embeddings is compatible with MutableMapping
        :rtype: ~azure.openai.models.Embeddings
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models._models.Embeddings] = kwargs.pop("cls", None)  # pylint: disable=protected-access

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=AzureJSONEncoder, exclude_readonly=True)  # type: ignore

        request = build_embeddings_create_request(
            deployment_id=deployment_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models._models.Embeddings, response.json())  # pylint: disable=protected-access

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore


class ImagesOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.openai.aio.OpenAIClient`'s
        :attr:`images` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @api_version_validation(
        method_added_on="2023-06-01-preview",
    )
    async def __generate_initial(
        self, body: Union[_models._models.ImageGenerationOptions, JSON, IO], **kwargs: Any
    ) -> JSON:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=AzureJSONEncoder, exclude_readonly=True)  # type: ignore

        request = build_images_generate_request(
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["Operation-Location"] = self._deserialize("str", response.headers.get("Operation-Location"))

        deserialized = _deserialize(JSON, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @overload
    @api_version_validation(
        method_added_on="2023-06-01-preview",
    )  # pylint: disable=protected-access
    async def begin__generate(  # pylint: disable=protected-access
        self, body: _models._models.ImageGenerationOptions, *, content_type: str = "application/json", **kwargs: Any
    ) -> AsyncLROPoller[_models._models.ImageGenerations]:
        ...

    @overload
    @api_version_validation(
        method_added_on="2023-06-01-preview",
    )  # pylint: disable=protected-access
    async def begin__generate(  # pylint: disable=protected-access
        self, body: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> AsyncLROPoller[_models._models.ImageGenerations]:
        ...

    @overload
    @api_version_validation(
        method_added_on="2023-06-01-preview",
    )  # pylint: disable=protected-access
    async def begin__generate(  # pylint: disable=protected-access
        self, body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> AsyncLROPoller[_models._models.ImageGenerations]:
        ...

    @distributed_trace_async
    @api_version_validation(
        method_added_on="2023-06-01-preview",
    )  # pylint: disable=protected-access
    async def begin__generate(  # pylint: disable=protected-access
        self, body: Union[_models._models.ImageGenerationOptions, JSON, IO], **kwargs: Any
    ) -> AsyncLROPoller[_models._models.ImageGenerations]:
        """Starts the generation of a batch of images from a text caption.

        :param body: Is one of the following types: ImageGenerationOptions, JSON, IO Required.
        :type body: ~azure.openai.models.ImageGenerationOptions or JSON or IO
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be AsyncLROBasePolling. Pass in False
         for this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of AsyncLROPoller that returns ImageGenerations. The ImageGenerations is
         compatible with MutableMapping
        :rtype: ~azure.core.polling.AsyncLROPoller[~azure.openai.models.ImageGenerations]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models._models.ImageGenerations] = kwargs.pop("cls", None)  # pylint: disable=protected-access
        polling: Union[bool, AsyncPollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = await self.__generate_initial(
                body=body, content_type=content_type, cls=lambda x, y, z: x, headers=_headers, params=_params, **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response_headers = {}
            response = pipeline_response.http_response
            response_headers["Operation-Location"] = self._deserialize(
                "str", response.headers.get("Operation-Location")
            )

            deserialized = _deserialize(
                _models._models.ImageGenerations, response.json()  # pylint: disable=protected-access
            )
            if cls:
                return cls(pipeline_response, deserialized, response_headers)  # type: ignore
            return deserialized

        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }

        if polling is True:
            polling_method: AsyncPollingMethod = cast(
                AsyncPollingMethod,
                AsyncLROBasePolling(lro_delay, path_format_arguments=path_format_arguments, **kwargs),
            )
        elif polling is False:
            polling_method = cast(AsyncPollingMethod, AsyncNoPolling())
        else:
            polling_method = polling
        if cont_token:
            return AsyncLROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return AsyncLROPoller(self._client, raw_result, get_long_running_output, polling_method)  # type: ignore


class AudioOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.openai.aio.OpenAIClient`'s
        :attr:`audio` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace_async
    @api_version_validation(
        method_added_on="2023-09-01-preview",
    )  # pylint: disable=protected-access
    async def _transcription(  # pylint: disable=protected-access
        self, deployment_id: str, body: _models._models.AudioTranscriptionOptions, **kwargs: Any
    ) -> _models._models.AudioTranscription:
        """Gets transcribed text and associated metadata from provided spoken audio data. Audio will be
        transcribed in the
        written language corresponding to the language it was spoken in.

        :param deployment_id: Specifies either the model deployment name (when using Azure OpenAI) or
         model name (when using non-Azure OpenAI) to use for this request. Required.
        :type deployment_id: str
        :param body: Required.
        :type body: ~azure.openai.models.AudioTranscriptionOptions
        :keyword content_type: The content type for the operation. Always multipart/form-data for this
         operation. Default value is "multipart/form-data".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: AudioTranscription. The AudioTranscription is compatible with MutableMapping
        :rtype: ~azure.openai.models.AudioTranscription
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: str = kwargs.pop("content_type", _headers.pop("content-type", "multipart/form-data"))
        cls: ClsType[_models._models.AudioTranscription] = kwargs.pop("cls", None)  # pylint: disable=protected-access

        _content = json.dumps(body, cls=AzureJSONEncoder, exclude_readonly=True)  # type: ignore

        request = build_audio_transcription_request(
            deployment_id=deployment_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(
                _models._models.AudioTranscription, response.json()  # pylint: disable=protected-access
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    @api_version_validation(
        method_added_on="2023-09-01-preview",
    )  # pylint: disable=protected-access
    async def _translation(  # pylint: disable=protected-access
        self, deployment_id: str, body: _models._models.AudioTranslationOptions, **kwargs: Any
    ) -> _models._models.AudioTranslation:
        """Gets English language transcribed text and associated metadata from provided spoken audio data.

        :param deployment_id: Specifies either the model deployment name (when using Azure OpenAI) or
         model name (when using non-Azure OpenAI) to use for this request. Required.
        :type deployment_id: str
        :param body: Required.
        :type body: ~azure.openai.models.AudioTranslationOptions
        :keyword content_type: The content type for the operation. Always multipart/form-data for this
         operation. Default value is "multipart/form-data".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: AudioTranslation. The AudioTranslation is compatible with MutableMapping
        :rtype: ~azure.openai.models.AudioTranslation
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: str = kwargs.pop("content_type", _headers.pop("content-type", "multipart/form-data"))
        cls: ClsType[_models._models.AudioTranslation] = kwargs.pop("cls", None)  # pylint: disable=protected-access

        _content = json.dumps(body, cls=AzureJSONEncoder, exclude_readonly=True)  # type: ignore

        request = build_audio_translation_request(
            deployment_id=deployment_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(
                _models._models.AudioTranslation, response.json()  # pylint: disable=protected-access
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore
