# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import sys
from typing import Any, Callable, Dict, IO, Iterable, Optional, TypeVar, Union, cast, overload
import urllib.parse

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.rest import HttpRequest, HttpResponse
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .._serialization import Serializer

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_metadata_roles_list_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2021-07-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/metadataRoles"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_metadata_policy_list_all_request(*, collection_name: Optional[str] = None, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2021-07-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/metadataPolicies"

    # Construct parameters
    if collection_name is not None:
        _params["collectionName"] = _SERIALIZER.query("collection_name", collection_name, "str")
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_metadata_policy_update_request(policy_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2021-07-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/metadataPolicies/{policyId}"
    path_format_arguments = {
        "policyId": _SERIALIZER.url("policy_id", policy_id, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_metadata_policy_get_request(policy_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2021-07-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/metadataPolicies/{policyId}"
    path_format_arguments = {
        "policyId": _SERIALIZER.url("policy_id", policy_id, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


class MetadataRolesOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.purview.administration.metadatapolicies.PurviewMetadataPoliciesClient`'s
        :attr:`metadata_roles` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list(self, **kwargs: Any) -> Iterable[JSON]:
        """Lists roles for Purview Account.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Optional. The Id of role.
                    "name": "str",  # Optional. The name of role.
                    "properties": {
                        "cnfCondition": [
                            [
                                {
                                    "attributeName": "str",  # Optional.
                                      AttributeName.
                                    "attributeValueExcludedIn": [
                                        "str"  # Optional. List of values
                                          excluded for attribute.
                                    ],
                                    "attributeValueExcludes": "str",  # Optional.
                                      Value excluded for attribute.
                                    "attributeValueIncludedIn": [
                                        "str"  # Optional. List of values for
                                          attribute.
                                    ],
                                    "attributeValueIncludes": "str"  # Optional.
                                      Value for attribute.
                                }
                            ]
                        ],
                        "description": "str",  # Optional. The description of role.
                        "dnfCondition": [
                            [
                                {
                                    "attributeName": "str",  # Optional.
                                      AttributeName.
                                    "attributeValueExcludedIn": [
                                        "str"  # Optional. List of values
                                          excluded for attribute.
                                    ],
                                    "attributeValueExcludes": "str",  # Optional.
                                      Value excluded for attribute.
                                    "attributeValueIncludedIn": [
                                        "str"  # Optional. List of values for
                                          attribute.
                                    ],
                                    "attributeValueIncludes": "str"  # Optional.
                                      Value for attribute.
                                }
                            ]
                        ],
                        "friendlyName": "str",  # Optional. The friendly name of role.
                        "provisioningState": "str",  # Optional. The provisioningState of
                          role.
                        "roleType": "str",  # Optional. The type of role.
                        "version": 0  # Optional. The version of role.
                    },
                    "type": "str"  # Optional. The type of role.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_metadata_roles_list_request(
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["values"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)


class MetadataPolicyOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.purview.administration.metadatapolicies.PurviewMetadataPoliciesClient`'s
        :attr:`metadata_policy` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list_all(self, *, collection_name: Optional[str] = None, **kwargs: Any) -> Iterable[JSON]:
        """List or Get metadata policies.

        :keyword collection_name: The name of an existing collection for which one policy needs to be
         fetched. Default value is None.
        :paramtype collection_name: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Optional. The id of policy.
                    "name": "str",  # Optional. The name of policy.
                    "properties": {
                        "attributeRules": [
                            {
                                "dnfCondition": [
                                    [
                                        {
                                            "attributeName": "str",  #
                                              Optional. AttributeName.
                                            "attributeValueExcludedIn": [
                                                "str"  # Optional.
                                                  List of values excluded for attribute.
                                            ],
                                            "attributeValueExcludes":
                                              "str",  # Optional. Value excluded for attribute.
                                            "attributeValueIncludedIn": [
                                                "str"  # Optional.
                                                  List of values for attribute.
                                            ],
                                            "attributeValueIncludes":
                                              "str"  # Optional. Value for attribute.
                                        }
                                    ]
                                ],
                                "id": "str",  # Optional. The id for rule.
                                "kind": "str",  # Optional. The kind of rule. Known
                                  values are: "decisionrule" and "attributerule".
                                "name": "str"  # Optional. The name for rule.
                            }
                        ],
                        "collection": {
                            "referenceName": "str",  # Optional. The name of reference.
                            "type": "CollectionReference"  # Optional. Default value is
                              "CollectionReference". The type of reference.
                        },
                        "decisionRules": [
                            {
                                "dnfCondition": [
                                    [
                                        {
                                            "attributeName": "str",  #
                                              Optional. AttributeName.
                                            "attributeValueExcludedIn": [
                                                "str"  # Optional.
                                                  List of values excluded for attribute.
                                            ],
                                            "attributeValueExcludes":
                                              "str",  # Optional. Value excluded for attribute.
                                            "attributeValueIncludedIn": [
                                                "str"  # Optional.
                                                  List of values for attribute.
                                            ],
                                            "attributeValueIncludes":
                                              "str"  # Optional. Value for attribute.
                                        }
                                    ]
                                ],
                                "effect": "str",  # Optional. The effect for rule.
                                  Known values are: "Deny" and "Permit".
                                "kind": "str"  # Optional. The kind of rule. Known
                                  values are: "decisionrule" and "attributerule".
                            }
                        ],
                        "description": "str",  # Optional. The description of policy.
                        "parentCollectionName": "str"  # Optional. The parent collection of
                          the policy.
                    },
                    "version": 0  # Optional. The version of policy.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_metadata_policy_list_all_request(
                    collection_name=collection_name,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["values"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @overload
    def update(
        self, policy_id: str, body: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> JSON:
        """Updates a metadata policy.

        :param policy_id: Unique policy id. Required.
        :type policy_id: str
        :param body: Policy to be updated. Default value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "id": "str",  # Optional. The id of policy.
                    "name": "str",  # Optional. The name of policy.
                    "properties": {
                        "attributeRules": [
                            {
                                "dnfCondition": [
                                    [
                                        {
                                            "attributeName": "str",  #
                                              Optional. AttributeName.
                                            "attributeValueExcludedIn": [
                                                "str"  # Optional.
                                                  List of values excluded for attribute.
                                            ],
                                            "attributeValueExcludes":
                                              "str",  # Optional. Value excluded for attribute.
                                            "attributeValueIncludedIn": [
                                                "str"  # Optional.
                                                  List of values for attribute.
                                            ],
                                            "attributeValueIncludes":
                                              "str"  # Optional. Value for attribute.
                                        }
                                    ]
                                ],
                                "id": "str",  # Optional. The id for rule.
                                "kind": "str",  # Optional. The kind of rule. Known
                                  values are: "decisionrule" and "attributerule".
                                "name": "str"  # Optional. The name for rule.
                            }
                        ],
                        "collection": {
                            "referenceName": "str",  # Optional. The name of reference.
                            "type": "CollectionReference"  # Optional. Default value is
                              "CollectionReference". The type of reference.
                        },
                        "decisionRules": [
                            {
                                "dnfCondition": [
                                    [
                                        {
                                            "attributeName": "str",  #
                                              Optional. AttributeName.
                                            "attributeValueExcludedIn": [
                                                "str"  # Optional.
                                                  List of values excluded for attribute.
                                            ],
                                            "attributeValueExcludes":
                                              "str",  # Optional. Value excluded for attribute.
                                            "attributeValueIncludedIn": [
                                                "str"  # Optional.
                                                  List of values for attribute.
                                            ],
                                            "attributeValueIncludes":
                                              "str"  # Optional. Value for attribute.
                                        }
                                    ]
                                ],
                                "effect": "str",  # Optional. The effect for rule.
                                  Known values are: "Deny" and "Permit".
                                "kind": "str"  # Optional. The kind of rule. Known
                                  values are: "decisionrule" and "attributerule".
                            }
                        ],
                        "description": "str",  # Optional. The description of policy.
                        "parentCollectionName": "str"  # Optional. The parent collection of
                          the policy.
                    },
                    "version": 0  # Optional. The version of policy.
                }

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Optional. The id of policy.
                    "name": "str",  # Optional. The name of policy.
                    "properties": {
                        "attributeRules": [
                            {
                                "dnfCondition": [
                                    [
                                        {
                                            "attributeName": "str",  #
                                              Optional. AttributeName.
                                            "attributeValueExcludedIn": [
                                                "str"  # Optional.
                                                  List of values excluded for attribute.
                                            ],
                                            "attributeValueExcludes":
                                              "str",  # Optional. Value excluded for attribute.
                                            "attributeValueIncludedIn": [
                                                "str"  # Optional.
                                                  List of values for attribute.
                                            ],
                                            "attributeValueIncludes":
                                              "str"  # Optional. Value for attribute.
                                        }
                                    ]
                                ],
                                "id": "str",  # Optional. The id for rule.
                                "kind": "str",  # Optional. The kind of rule. Known
                                  values are: "decisionrule" and "attributerule".
                                "name": "str"  # Optional. The name for rule.
                            }
                        ],
                        "collection": {
                            "referenceName": "str",  # Optional. The name of reference.
                            "type": "CollectionReference"  # Optional. Default value is
                              "CollectionReference". The type of reference.
                        },
                        "decisionRules": [
                            {
                                "dnfCondition": [
                                    [
                                        {
                                            "attributeName": "str",  #
                                              Optional. AttributeName.
                                            "attributeValueExcludedIn": [
                                                "str"  # Optional.
                                                  List of values excluded for attribute.
                                            ],
                                            "attributeValueExcludes":
                                              "str",  # Optional. Value excluded for attribute.
                                            "attributeValueIncludedIn": [
                                                "str"  # Optional.
                                                  List of values for attribute.
                                            ],
                                            "attributeValueIncludes":
                                              "str"  # Optional. Value for attribute.
                                        }
                                    ]
                                ],
                                "effect": "str",  # Optional. The effect for rule.
                                  Known values are: "Deny" and "Permit".
                                "kind": "str"  # Optional. The kind of rule. Known
                                  values are: "decisionrule" and "attributerule".
                            }
                        ],
                        "description": "str",  # Optional. The description of policy.
                        "parentCollectionName": "str"  # Optional. The parent collection of
                          the policy.
                    },
                    "version": 0  # Optional. The version of policy.
                }
        """

    @overload
    def update(
        self, policy_id: str, body: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> JSON:
        """Updates a metadata policy.

        :param policy_id: Unique policy id. Required.
        :type policy_id: str
        :param body: Policy to be updated. Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Optional. The id of policy.
                    "name": "str",  # Optional. The name of policy.
                    "properties": {
                        "attributeRules": [
                            {
                                "dnfCondition": [
                                    [
                                        {
                                            "attributeName": "str",  #
                                              Optional. AttributeName.
                                            "attributeValueExcludedIn": [
                                                "str"  # Optional.
                                                  List of values excluded for attribute.
                                            ],
                                            "attributeValueExcludes":
                                              "str",  # Optional. Value excluded for attribute.
                                            "attributeValueIncludedIn": [
                                                "str"  # Optional.
                                                  List of values for attribute.
                                            ],
                                            "attributeValueIncludes":
                                              "str"  # Optional. Value for attribute.
                                        }
                                    ]
                                ],
                                "id": "str",  # Optional. The id for rule.
                                "kind": "str",  # Optional. The kind of rule. Known
                                  values are: "decisionrule" and "attributerule".
                                "name": "str"  # Optional. The name for rule.
                            }
                        ],
                        "collection": {
                            "referenceName": "str",  # Optional. The name of reference.
                            "type": "CollectionReference"  # Optional. Default value is
                              "CollectionReference". The type of reference.
                        },
                        "decisionRules": [
                            {
                                "dnfCondition": [
                                    [
                                        {
                                            "attributeName": "str",  #
                                              Optional. AttributeName.
                                            "attributeValueExcludedIn": [
                                                "str"  # Optional.
                                                  List of values excluded for attribute.
                                            ],
                                            "attributeValueExcludes":
                                              "str",  # Optional. Value excluded for attribute.
                                            "attributeValueIncludedIn": [
                                                "str"  # Optional.
                                                  List of values for attribute.
                                            ],
                                            "attributeValueIncludes":
                                              "str"  # Optional. Value for attribute.
                                        }
                                    ]
                                ],
                                "effect": "str",  # Optional. The effect for rule.
                                  Known values are: "Deny" and "Permit".
                                "kind": "str"  # Optional. The kind of rule. Known
                                  values are: "decisionrule" and "attributerule".
                            }
                        ],
                        "description": "str",  # Optional. The description of policy.
                        "parentCollectionName": "str"  # Optional. The parent collection of
                          the policy.
                    },
                    "version": 0  # Optional. The version of policy.
                }
        """

    @distributed_trace
    def update(self, policy_id: str, body: Optional[Union[JSON, IO]] = None, **kwargs: Any) -> JSON:
        """Updates a metadata policy.

        :param policy_id: Unique policy id. Required.
        :type policy_id: str
        :param body: Policy to be updated. Is either a JSON type or a IO type. Default value is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "id": "str",  # Optional. The id of policy.
                    "name": "str",  # Optional. The name of policy.
                    "properties": {
                        "attributeRules": [
                            {
                                "dnfCondition": [
                                    [
                                        {
                                            "attributeName": "str",  #
                                              Optional. AttributeName.
                                            "attributeValueExcludedIn": [
                                                "str"  # Optional.
                                                  List of values excluded for attribute.
                                            ],
                                            "attributeValueExcludes":
                                              "str",  # Optional. Value excluded for attribute.
                                            "attributeValueIncludedIn": [
                                                "str"  # Optional.
                                                  List of values for attribute.
                                            ],
                                            "attributeValueIncludes":
                                              "str"  # Optional. Value for attribute.
                                        }
                                    ]
                                ],
                                "id": "str",  # Optional. The id for rule.
                                "kind": "str",  # Optional. The kind of rule. Known
                                  values are: "decisionrule" and "attributerule".
                                "name": "str"  # Optional. The name for rule.
                            }
                        ],
                        "collection": {
                            "referenceName": "str",  # Optional. The name of reference.
                            "type": "CollectionReference"  # Optional. Default value is
                              "CollectionReference". The type of reference.
                        },
                        "decisionRules": [
                            {
                                "dnfCondition": [
                                    [
                                        {
                                            "attributeName": "str",  #
                                              Optional. AttributeName.
                                            "attributeValueExcludedIn": [
                                                "str"  # Optional.
                                                  List of values excluded for attribute.
                                            ],
                                            "attributeValueExcludes":
                                              "str",  # Optional. Value excluded for attribute.
                                            "attributeValueIncludedIn": [
                                                "str"  # Optional.
                                                  List of values for attribute.
                                            ],
                                            "attributeValueIncludes":
                                              "str"  # Optional. Value for attribute.
                                        }
                                    ]
                                ],
                                "effect": "str",  # Optional. The effect for rule.
                                  Known values are: "Deny" and "Permit".
                                "kind": "str"  # Optional. The kind of rule. Known
                                  values are: "decisionrule" and "attributerule".
                            }
                        ],
                        "description": "str",  # Optional. The description of policy.
                        "parentCollectionName": "str"  # Optional. The parent collection of
                          the policy.
                    },
                    "version": 0  # Optional. The version of policy.
                }

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Optional. The id of policy.
                    "name": "str",  # Optional. The name of policy.
                    "properties": {
                        "attributeRules": [
                            {
                                "dnfCondition": [
                                    [
                                        {
                                            "attributeName": "str",  #
                                              Optional. AttributeName.
                                            "attributeValueExcludedIn": [
                                                "str"  # Optional.
                                                  List of values excluded for attribute.
                                            ],
                                            "attributeValueExcludes":
                                              "str",  # Optional. Value excluded for attribute.
                                            "attributeValueIncludedIn": [
                                                "str"  # Optional.
                                                  List of values for attribute.
                                            ],
                                            "attributeValueIncludes":
                                              "str"  # Optional. Value for attribute.
                                        }
                                    ]
                                ],
                                "id": "str",  # Optional. The id for rule.
                                "kind": "str",  # Optional. The kind of rule. Known
                                  values are: "decisionrule" and "attributerule".
                                "name": "str"  # Optional. The name for rule.
                            }
                        ],
                        "collection": {
                            "referenceName": "str",  # Optional. The name of reference.
                            "type": "CollectionReference"  # Optional. Default value is
                              "CollectionReference". The type of reference.
                        },
                        "decisionRules": [
                            {
                                "dnfCondition": [
                                    [
                                        {
                                            "attributeName": "str",  #
                                              Optional. AttributeName.
                                            "attributeValueExcludedIn": [
                                                "str"  # Optional.
                                                  List of values excluded for attribute.
                                            ],
                                            "attributeValueExcludes":
                                              "str",  # Optional. Value excluded for attribute.
                                            "attributeValueIncludedIn": [
                                                "str"  # Optional.
                                                  List of values for attribute.
                                            ],
                                            "attributeValueIncludes":
                                              "str"  # Optional. Value for attribute.
                                        }
                                    ]
                                ],
                                "effect": "str",  # Optional. The effect for rule.
                                  Known values are: "Deny" and "Permit".
                                "kind": "str"  # Optional. The kind of rule. Known
                                  values are: "decisionrule" and "attributerule".
                            }
                        ],
                        "description": "str",  # Optional. The description of policy.
                        "parentCollectionName": "str"  # Optional. The parent collection of
                          the policy.
                    },
                    "version": 0  # Optional. The version of policy.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_metadata_policy_update_request(
            policy_id=policy_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def get(self, policy_id: str, **kwargs: Any) -> JSON:
        """Gets a metadata policy.

        :param policy_id: Id of an existing policy that needs to be fetched. Required.
        :type policy_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Optional. The id of policy.
                    "name": "str",  # Optional. The name of policy.
                    "properties": {
                        "attributeRules": [
                            {
                                "dnfCondition": [
                                    [
                                        {
                                            "attributeName": "str",  #
                                              Optional. AttributeName.
                                            "attributeValueExcludedIn": [
                                                "str"  # Optional.
                                                  List of values excluded for attribute.
                                            ],
                                            "attributeValueExcludes":
                                              "str",  # Optional. Value excluded for attribute.
                                            "attributeValueIncludedIn": [
                                                "str"  # Optional.
                                                  List of values for attribute.
                                            ],
                                            "attributeValueIncludes":
                                              "str"  # Optional. Value for attribute.
                                        }
                                    ]
                                ],
                                "id": "str",  # Optional. The id for rule.
                                "kind": "str",  # Optional. The kind of rule. Known
                                  values are: "decisionrule" and "attributerule".
                                "name": "str"  # Optional. The name for rule.
                            }
                        ],
                        "collection": {
                            "referenceName": "str",  # Optional. The name of reference.
                            "type": "CollectionReference"  # Optional. Default value is
                              "CollectionReference". The type of reference.
                        },
                        "decisionRules": [
                            {
                                "dnfCondition": [
                                    [
                                        {
                                            "attributeName": "str",  #
                                              Optional. AttributeName.
                                            "attributeValueExcludedIn": [
                                                "str"  # Optional.
                                                  List of values excluded for attribute.
                                            ],
                                            "attributeValueExcludes":
                                              "str",  # Optional. Value excluded for attribute.
                                            "attributeValueIncludedIn": [
                                                "str"  # Optional.
                                                  List of values for attribute.
                                            ],
                                            "attributeValueIncludes":
                                              "str"  # Optional. Value for attribute.
                                        }
                                    ]
                                ],
                                "effect": "str",  # Optional. The effect for rule.
                                  Known values are: "Deny" and "Permit".
                                "kind": "str"  # Optional. The kind of rule. Known
                                  values are: "decisionrule" and "attributerule".
                            }
                        ],
                        "description": "str",  # Optional. The description of policy.
                        "parentCollectionName": "str"  # Optional. The parent collection of
                          the policy.
                    },
                    "version": 0  # Optional. The version of policy.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_metadata_policy_get_request(
            policy_id=policy_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)
