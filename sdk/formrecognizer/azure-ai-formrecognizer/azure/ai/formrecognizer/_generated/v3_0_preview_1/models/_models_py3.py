# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._form_recognizer_client_enums import *


class AnalyzeOperationResult(msrest.serialization.Model):
    """Status and result of the queued analyze operation.

    All required parameters must be populated in order to send to Azure.

    :param status: Required. Operation status. Possible values include: "notStarted", "running",
     "succeeded", "failed", "canceled".
    :type status: str or ~azure.ai.formrecognizer.models.OperationStatus
    :param created_date_time: Required. Date and time (UTC) when the analyze operation was
     submitted.
    :type created_date_time: ~datetime.datetime
    :param last_updated_date_time: Required. Date and time (UTC) when the status was last updated.
    :type last_updated_date_time: ~datetime.datetime
    :param analyze_result: Results of the analyze operation.
    :type analyze_result: ~azure.ai.formrecognizer.models.AnalyzeResultAutoGenerated
    """

    _validation = {
        'status': {'required': True},
        'created_date_time': {'required': True},
        'last_updated_date_time': {'required': True},
    }

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_updated_date_time': {'key': 'lastUpdatedDateTime', 'type': 'iso-8601'},
        'analyze_result': {'key': 'analyzeResult', 'type': 'AnalyzeResultAutoGenerated'},
    }

    def __init__(
        self,
        *,
        status: Union[str, "OperationStatus"],
        created_date_time: datetime.datetime,
        last_updated_date_time: datetime.datetime,
        analyze_result: Optional["AnalyzeResultAutoGenerated"] = None,
        **kwargs
    ):
        super(AnalyzeOperationResult, self).__init__(**kwargs)
        self.status = status
        self.created_date_time = created_date_time
        self.last_updated_date_time = last_updated_date_time
        self.analyze_result = analyze_result


class AnalyzeResult(msrest.serialization.Model):
    """Document analysis result.

    All required parameters must be populated in order to send to Azure.

    :param api_version: Required. API version used to produce this result. Possible values include:
     "2021-07-30-preview".
    :type api_version: str or ~azure.ai.formrecognizer.models.ApiVersion
    :param model_id: Required. Model ID used to produce this result.
    :type model_id: str
    :param string_index_type: Required. Method used to compute string offset and length. Possible
     values include: "textElements", "unicodeCodePoint", "utf16CodeUnit".
    :type string_index_type: str or ~azure.ai.formrecognizer.models.StringIndexType
    :param content: Required. Concatenate string representation of all textual and visual elements
     in reading order.
    :type content: str
    :param pages: Required. Analyzed pages.
    :type pages: list[~azure.ai.formrecognizer.models.DocumentPage]
    :param tables: Extracted tables.
    :type tables: list[~azure.ai.formrecognizer.models.DocumentTable]
    :param key_value_pairs: Extracted key-value pairs.
    :type key_value_pairs: list[~azure.ai.formrecognizer.models.DocumentKeyValuePair]
    :param entities: Extracted entities.
    :type entities: list[~azure.ai.formrecognizer.models.DocumentEntity]
    :param styles: Extracted font styles.
    :type styles: list[~azure.ai.formrecognizer.models.DocumentStyle]
    :param documents: Extracted documents.
    :type documents: list[~azure.ai.formrecognizer.models.Document]
    """

    _validation = {
        'api_version': {'required': True},
        'model_id': {'required': True},
        'string_index_type': {'required': True},
        'content': {'required': True},
        'pages': {'required': True},
    }

    _attribute_map = {
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'model_id': {'key': 'modelId', 'type': 'str'},
        'string_index_type': {'key': 'stringIndexType', 'type': 'str'},
        'content': {'key': 'content', 'type': 'str'},
        'pages': {'key': 'pages', 'type': '[DocumentPage]'},
        'tables': {'key': 'tables', 'type': '[DocumentTable]'},
        'key_value_pairs': {'key': 'keyValuePairs', 'type': '[DocumentKeyValuePair]'},
        'entities': {'key': 'entities', 'type': '[DocumentEntity]'},
        'styles': {'key': 'styles', 'type': '[DocumentStyle]'},
        'documents': {'key': 'documents', 'type': '[Document]'},
    }

    def __init__(
        self,
        *,
        api_version: Union[str, "ApiVersion"],
        model_id: str,
        string_index_type: Union[str, "StringIndexType"],
        content: str,
        pages: List["DocumentPage"],
        tables: Optional[List["DocumentTable"]] = None,
        key_value_pairs: Optional[List["DocumentKeyValuePair"]] = None,
        entities: Optional[List["DocumentEntity"]] = None,
        styles: Optional[List["DocumentStyle"]] = None,
        documents: Optional[List["Document"]] = None,
        **kwargs
    ):
        super(AnalyzeResult, self).__init__(**kwargs)
        self.api_version = api_version
        self.model_id = model_id
        self.string_index_type = string_index_type
        self.content = content
        self.pages = pages
        self.tables = tables
        self.key_value_pairs = key_value_pairs
        self.entities = entities
        self.styles = styles
        self.documents = documents


class AnalyzeResultAutoGenerated(msrest.serialization.Model):
    """Analyze operation result.

    All required parameters must be populated in order to send to Azure.

    :param version: Required. Version of schema used for this result.
    :type version: str
    :param read_results: Required. Text extracted from the input.
    :type read_results: list[~azure.ai.formrecognizer.models.ReadResult]
    :param page_results: Page-level information extracted from the input.
    :type page_results: list[~azure.ai.formrecognizer.models.PageResult]
    :param document_results: Document-level information extracted from the input.
    :type document_results: list[~azure.ai.formrecognizer.models.DocumentResult]
    :param errors: List of errors reported during the analyze operation.
    :type errors: list[~azure.ai.formrecognizer.models.ErrorInformation]
    """

    _validation = {
        'version': {'required': True},
        'read_results': {'required': True},
    }

    _attribute_map = {
        'version': {'key': 'version', 'type': 'str'},
        'read_results': {'key': 'readResults', 'type': '[ReadResult]'},
        'page_results': {'key': 'pageResults', 'type': '[PageResult]'},
        'document_results': {'key': 'documentResults', 'type': '[DocumentResult]'},
        'errors': {'key': 'errors', 'type': '[ErrorInformation]'},
    }

    def __init__(
        self,
        *,
        version: str,
        read_results: List["ReadResult"],
        page_results: Optional[List["PageResult"]] = None,
        document_results: Optional[List["DocumentResult"]] = None,
        errors: Optional[List["ErrorInformation"]] = None,
        **kwargs
    ):
        super(AnalyzeResultAutoGenerated, self).__init__(**kwargs)
        self.version = version
        self.read_results = read_results
        self.page_results = page_results
        self.document_results = document_results
        self.errors = errors


class AnalyzeResultOperation(msrest.serialization.Model):
    """Status and result of the analyze operation.

    All required parameters must be populated in order to send to Azure.

    :param status: Required. Operation status. Possible values include: "notStarted", "running",
     "failed", "succeeded".
    :type status: str or ~azure.ai.formrecognizer.models.AnalyzeResultOperationStatus
    :param created_date_time: Required. Date and time (UTC) when the analyze operation was
     submitted.
    :type created_date_time: ~datetime.datetime
    :param last_updated_date_time: Required. Date and time (UTC) when the status was last updated.
    :type last_updated_date_time: ~datetime.datetime
    :param error: Encountered error during document analysis.
    :type error: ~azure.ai.formrecognizer.models.Error
    :param analyze_result: Document analysis result.
    :type analyze_result: ~azure.ai.formrecognizer.models.AnalyzeResult
    """

    _validation = {
        'status': {'required': True},
        'created_date_time': {'required': True},
        'last_updated_date_time': {'required': True},
    }

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_updated_date_time': {'key': 'lastUpdatedDateTime', 'type': 'iso-8601'},
        'error': {'key': 'error', 'type': 'Error'},
        'analyze_result': {'key': 'analyzeResult', 'type': 'AnalyzeResult'},
    }

    def __init__(
        self,
        *,
        status: Union[str, "AnalyzeResultOperationStatus"],
        created_date_time: datetime.datetime,
        last_updated_date_time: datetime.datetime,
        error: Optional["Error"] = None,
        analyze_result: Optional["AnalyzeResult"] = None,
        **kwargs
    ):
        super(AnalyzeResultOperation, self).__init__(**kwargs)
        self.status = status
        self.created_date_time = created_date_time
        self.last_updated_date_time = last_updated_date_time
        self.error = error
        self.analyze_result = analyze_result


class ContentSource(msrest.serialization.Model):
    """Content data or location specification.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AzureBlobContentSource, Base64ContentSource, LocalContentSource, WebContentSource.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Source types.Constant filled by server.  Possible values include:
     "base64", "azure.blob", "local", "web".
    :type kind: str or ~azure.ai.formrecognizer.models.ContentSourceKind
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'azure.blob': 'AzureBlobContentSource', 'base64': 'Base64ContentSource', 'local': 'LocalContentSource', 'web': 'WebContentSource'}
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ContentSource, self).__init__(**kwargs)
        self.kind = None  # type: Optional[str]


class AzureBlobContentSource(ContentSource):
    """Azure Blob Storage content.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Source types.Constant filled by server.  Possible values include:
     "base64", "azure.blob", "local", "web".
    :type kind: str or ~azure.ai.formrecognizer.models.ContentSourceKind
    :param container_url: Required. Azure Blob Storage container URL.
    :type container_url: str
    :param path: Content path.
    :type path: str
    """

    _validation = {
        'kind': {'required': True},
        'container_url': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'container_url': {'key': 'containerUrl', 'type': 'str'},
        'path': {'key': 'path', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        container_url: str,
        path: Optional[str] = None,
        **kwargs
    ):
        super(AzureBlobContentSource, self).__init__(**kwargs)
        self.kind = 'azure.blob'  # type: str
        self.container_url = container_url
        self.path = path


class Base64ContentSource(ContentSource):
    """Content represented via Base64 encoding.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Source types.Constant filled by server.  Possible values include:
     "base64", "azure.blob", "local", "web".
    :type kind: str or ~azure.ai.formrecognizer.models.ContentSourceKind
    :param data: Required. Base64 encoded content data.
    :type data: bytearray
    """

    _validation = {
        'kind': {'required': True},
        'data': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'data': {'key': 'data', 'type': 'bytearray'},
    }

    def __init__(
        self,
        *,
        data: bytearray,
        **kwargs
    ):
        super(Base64ContentSource, self).__init__(**kwargs)
        self.kind = 'base64'  # type: str
        self.data = data


class BoundingRegion(msrest.serialization.Model):
    """Bounding box on a specific page of the input.

    All required parameters must be populated in order to send to Azure.

    :param page_number: Required. 1-based page number of page containing the bounding region.
    :type page_number: int
    :param bounding_box: Required. Bounding box on the page, or the entire page if not specified.
    :type bounding_box: list[float]
    """

    _validation = {
        'page_number': {'required': True, 'minimum': 1},
        'bounding_box': {'required': True, 'max_items': 8, 'min_items': 8},
    }

    _attribute_map = {
        'page_number': {'key': 'pageNumber', 'type': 'int'},
        'bounding_box': {'key': 'boundingBox', 'type': '[float]'},
    }

    def __init__(
        self,
        *,
        page_number: int,
        bounding_box: List[float],
        **kwargs
    ):
        super(BoundingRegion, self).__init__(**kwargs)
        self.page_number = page_number
        self.bounding_box = bounding_box


class Components70NzpzSchemasModelinfoPropertiesDoctypesAdditionalproperties(msrest.serialization.Model):
    """Components70NzpzSchemasModelinfoPropertiesDoctypesAdditionalproperties.

    All required parameters must be populated in order to send to Azure.

    :param description: Model description.
    :type description: str
    :param field_confidence: Estimated confidence for each field.
    :type field_confidence: dict[str, float]
    :param field_schema: Required. Description of the document semantic schema using a JSON Schema
     style syntax.
    :type field_schema: dict[str, ~azure.ai.formrecognizer.models.FieldTypeSchema]
    :param technique: Technique for building a custom model. Possible values include:
     "fixedTemplate-2021-07-30".
    :type technique: str or ~azure.ai.formrecognizer.models.DocumentModelBuildTechnique
    """

    _validation = {
        'description': {'max_length': 4096, 'min_length': 0},
        'field_schema': {'required': True},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'field_confidence': {'key': 'fieldConfidence', 'type': '{float}'},
        'field_schema': {'key': 'fieldSchema', 'type': '{FieldTypeSchema}'},
        'technique': {'key': 'technique', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        field_schema: Dict[str, "FieldTypeSchema"],
        description: Optional[str] = None,
        field_confidence: Optional[Dict[str, float]] = None,
        technique: Optional[Union[str, "DocumentModelBuildTechnique"]] = None,
        **kwargs
    ):
        super(Components70NzpzSchemasModelinfoPropertiesDoctypesAdditionalproperties, self).__init__(**kwargs)
        self.description = description
        self.field_confidence = field_confidence
        self.field_schema = field_schema
        self.technique = technique


class CopyAuthorization(msrest.serialization.Model):
    """Authorization to copy a model to the specified target resource and modelId.

    All required parameters must be populated in order to send to Azure.

    :param target_resource_id: Required. ID of the target Azure resource where the model should be
     copied to.
    :type target_resource_id: str
    :param target_resource_region: Required. Location of the target Azure resource where the model
     should be copied to.
    :type target_resource_region: str
    :param target_model_id: Required. Identifier of the target model.
    :type target_model_id: str
    :param target_model_location: URL of the copied model in the target account.
    :type target_model_location: str
    :param access_token: Required. Token used to authorize the request.
    :type access_token: str
    :param expiration_date_time: Required. Date/time when the access token expires.
    :type expiration_date_time: ~datetime.datetime
    """

    _validation = {
        'target_resource_id': {'required': True},
        'target_resource_region': {'required': True},
        'target_model_id': {'required': True},
        'access_token': {'required': True},
        'expiration_date_time': {'required': True},
    }

    _attribute_map = {
        'target_resource_id': {'key': 'targetResourceId', 'type': 'str'},
        'target_resource_region': {'key': 'targetResourceRegion', 'type': 'str'},
        'target_model_id': {'key': 'targetModelId', 'type': 'str'},
        'target_model_location': {'key': 'targetModelLocation', 'type': 'str'},
        'access_token': {'key': 'accessToken', 'type': 'str'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        target_resource_id: str,
        target_resource_region: str,
        target_model_id: str,
        access_token: str,
        expiration_date_time: datetime.datetime,
        target_model_location: Optional[str] = None,
        **kwargs
    ):
        super(CopyAuthorization, self).__init__(**kwargs)
        self.target_resource_id = target_resource_id
        self.target_resource_region = target_resource_region
        self.target_model_id = target_model_id
        self.target_model_location = target_model_location
        self.access_token = access_token
        self.expiration_date_time = expiration_date_time


class CopyAuthorizationResult(msrest.serialization.Model):
    """Request parameter that contains authorization claims for copy operation.

    All required parameters must be populated in order to send to Azure.

    :param model_id: Required. Model identifier.
    :type model_id: str
    :param access_token: Required. Token claim used to authorize the request.
    :type access_token: str
    :param expiration_date_time_ticks: Required. The time when the access token expires. The date
     is represented as the number of seconds from 1970-01-01T0:0:0Z UTC until the expiration time.
    :type expiration_date_time_ticks: long
    """

    _validation = {
        'model_id': {'required': True},
        'access_token': {'required': True},
        'expiration_date_time_ticks': {'required': True},
    }

    _attribute_map = {
        'model_id': {'key': 'modelId', 'type': 'str'},
        'access_token': {'key': 'accessToken', 'type': 'str'},
        'expiration_date_time_ticks': {'key': 'expirationDateTimeTicks', 'type': 'long'},
    }

    def __init__(
        self,
        *,
        model_id: str,
        access_token: str,
        expiration_date_time_ticks: int,
        **kwargs
    ):
        super(CopyAuthorizationResult, self).__init__(**kwargs)
        self.model_id = model_id
        self.access_token = access_token
        self.expiration_date_time_ticks = expiration_date_time_ticks


class CopyOperationResult(msrest.serialization.Model):
    """Status and result of the queued copy operation.

    All required parameters must be populated in order to send to Azure.

    :param status: Required. Operation status. Possible values include: "notStarted", "running",
     "succeeded", "failed", "canceled".
    :type status: str or ~azure.ai.formrecognizer.models.OperationStatus
    :param created_date_time: Required. Date and time (UTC) when the copy operation was submitted.
    :type created_date_time: ~datetime.datetime
    :param last_updated_date_time: Required. Date and time (UTC) when the status was last updated.
    :type last_updated_date_time: ~datetime.datetime
    :param copy_result: Results of the copy operation.
    :type copy_result: ~azure.ai.formrecognizer.models.CopyResult
    """

    _validation = {
        'status': {'required': True},
        'created_date_time': {'required': True},
        'last_updated_date_time': {'required': True},
    }

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_updated_date_time': {'key': 'lastUpdatedDateTime', 'type': 'iso-8601'},
        'copy_result': {'key': 'copyResult', 'type': 'CopyResult'},
    }

    def __init__(
        self,
        *,
        status: Union[str, "OperationStatus"],
        created_date_time: datetime.datetime,
        last_updated_date_time: datetime.datetime,
        copy_result: Optional["CopyResult"] = None,
        **kwargs
    ):
        super(CopyOperationResult, self).__init__(**kwargs)
        self.status = status
        self.created_date_time = created_date_time
        self.last_updated_date_time = last_updated_date_time
        self.copy_result = copy_result


class CopyRequest(msrest.serialization.Model):
    """Request parameter to copy an existing custom model from the source resource to a target resource referenced by the resource ID.

    All required parameters must be populated in order to send to Azure.

    :param target_resource_id: Required. Azure Resource Id of the target Form Recognizer resource
     where the model is copied to.
    :type target_resource_id: str
    :param target_resource_region: Required. Location of the target Azure resource. A valid Azure
     region name supported by Cognitive Services.
    :type target_resource_region: str
    :param copy_authorization: Required. Entity that encodes claims to authorize the copy request.
    :type copy_authorization: ~azure.ai.formrecognizer.models.CopyAuthorizationResult
    """

    _validation = {
        'target_resource_id': {'required': True, 'max_length': 1024, 'min_length': 0, 'pattern': r'^/subscriptions/[^/]*/resourceGroups/[^/]*/providers/Microsoft.CognitiveServices/accounts/[^/]*$'},
        'target_resource_region': {'required': True, 'max_length': 24, 'min_length': 1, 'pattern': r'^[a-z0-9]+$'},
        'copy_authorization': {'required': True},
    }

    _attribute_map = {
        'target_resource_id': {'key': 'targetResourceId', 'type': 'str'},
        'target_resource_region': {'key': 'targetResourceRegion', 'type': 'str'},
        'copy_authorization': {'key': 'copyAuthorization', 'type': 'CopyAuthorizationResult'},
    }

    def __init__(
        self,
        *,
        target_resource_id: str,
        target_resource_region: str,
        copy_authorization: "CopyAuthorizationResult",
        **kwargs
    ):
        super(CopyRequest, self).__init__(**kwargs)
        self.target_resource_id = target_resource_id
        self.target_resource_region = target_resource_region
        self.copy_authorization = copy_authorization


class CopyResult(msrest.serialization.Model):
    """Custom model copy result.

    All required parameters must be populated in order to send to Azure.

    :param model_id: Required. Identifier of the target model.
    :type model_id: str
    :param errors: Errors returned during the copy operation.
    :type errors: list[~azure.ai.formrecognizer.models.ErrorInformation]
    """

    _validation = {
        'model_id': {'required': True},
    }

    _attribute_map = {
        'model_id': {'key': 'modelId', 'type': 'str'},
        'errors': {'key': 'errors', 'type': '[ErrorInformation]'},
    }

    def __init__(
        self,
        *,
        model_id: str,
        errors: Optional[List["ErrorInformation"]] = None,
        **kwargs
    ):
        super(CopyResult, self).__init__(**kwargs)
        self.model_id = model_id
        self.errors = errors


class DataTable(msrest.serialization.Model):
    """Information about the extracted table contained in a page.

    All required parameters must be populated in order to send to Azure.

    :param rows: Required. Number of rows.
    :type rows: int
    :param columns: Required. Number of columns.
    :type columns: int
    :param cells: Required. List of cells contained in the table.
    :type cells: list[~azure.ai.formrecognizer.models.DataTableCell]
    """

    _validation = {
        'rows': {'required': True, 'minimum': 1},
        'columns': {'required': True, 'minimum': 1},
        'cells': {'required': True},
    }

    _attribute_map = {
        'rows': {'key': 'rows', 'type': 'int'},
        'columns': {'key': 'columns', 'type': 'int'},
        'cells': {'key': 'cells', 'type': '[DataTableCell]'},
    }

    def __init__(
        self,
        *,
        rows: int,
        columns: int,
        cells: List["DataTableCell"],
        **kwargs
    ):
        super(DataTable, self).__init__(**kwargs)
        self.rows = rows
        self.columns = columns
        self.cells = cells


class DataTableCell(msrest.serialization.Model):
    """Information about the extracted cell in a table.

    All required parameters must be populated in order to send to Azure.

    :param row_index: Required. Row index of the cell.
    :type row_index: int
    :param column_index: Required. Column index of the cell.
    :type column_index: int
    :param row_span: Number of rows spanned by this cell.
    :type row_span: int
    :param column_span: Number of columns spanned by this cell.
    :type column_span: int
    :param text: Required. Text content of the cell.
    :type text: str
    :param bounding_box: Required. Bounding box of the cell.
    :type bounding_box: list[float]
    :param confidence: Required. Confidence value.
    :type confidence: float
    :param elements: When includeTextDetails is set to true, a list of references to the text
     elements constituting this table cell.
    :type elements: list[str]
    :param is_header: Is the current cell a header cell?.
    :type is_header: bool
    :param is_footer: Is the current cell a footer cell?.
    :type is_footer: bool
    """

    _validation = {
        'row_index': {'required': True, 'minimum': 0},
        'column_index': {'required': True, 'minimum': 0},
        'row_span': {'minimum': 1},
        'column_span': {'minimum': 1},
        'text': {'required': True},
        'bounding_box': {'required': True, 'max_items': 8, 'min_items': 8},
        'confidence': {'required': True, 'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'row_index': {'key': 'rowIndex', 'type': 'int'},
        'column_index': {'key': 'columnIndex', 'type': 'int'},
        'row_span': {'key': 'rowSpan', 'type': 'int'},
        'column_span': {'key': 'columnSpan', 'type': 'int'},
        'text': {'key': 'text', 'type': 'str'},
        'bounding_box': {'key': 'boundingBox', 'type': '[float]'},
        'confidence': {'key': 'confidence', 'type': 'float'},
        'elements': {'key': 'elements', 'type': '[str]'},
        'is_header': {'key': 'isHeader', 'type': 'bool'},
        'is_footer': {'key': 'isFooter', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        row_index: int,
        column_index: int,
        text: str,
        bounding_box: List[float],
        confidence: float,
        row_span: Optional[int] = 1,
        column_span: Optional[int] = 1,
        elements: Optional[List[str]] = None,
        is_header: Optional[bool] = False,
        is_footer: Optional[bool] = False,
        **kwargs
    ):
        super(DataTableCell, self).__init__(**kwargs)
        self.row_index = row_index
        self.column_index = column_index
        self.row_span = row_span
        self.column_span = column_span
        self.text = text
        self.bounding_box = bounding_box
        self.confidence = confidence
        self.elements = elements
        self.is_header = is_header
        self.is_footer = is_footer


class Document(msrest.serialization.Model):
    """An object describing the location and semantic content of a document.

    All required parameters must be populated in order to send to Azure.

    :param doc_type: Required. Document type.
    :type doc_type: str
    :param bounding_regions: Required. Bounding regions covering the document.
    :type bounding_regions: list[~azure.ai.formrecognizer.models.BoundingRegion]
    :param fields: Required. Dictionary of named field values.
    :type fields: dict[str, ~azure.ai.formrecognizer.models.FieldValue]
    :param confidence: Required. Confidence of correctly extracting the document.
    :type confidence: float
    :param spans: Required. Location of the document in the reading order concatenated content.
    :type spans: list[~azure.ai.formrecognizer.models.DocumentSpan]
    """

    _validation = {
        'doc_type': {'required': True, 'max_length': 64, 'min_length': 2},
        'bounding_regions': {'required': True},
        'fields': {'required': True},
        'confidence': {'required': True, 'maximum': 1, 'minimum': 0},
        'spans': {'required': True},
    }

    _attribute_map = {
        'doc_type': {'key': 'docType', 'type': 'str'},
        'bounding_regions': {'key': 'boundingRegions', 'type': '[BoundingRegion]'},
        'fields': {'key': 'fields', 'type': '{FieldValue}'},
        'confidence': {'key': 'confidence', 'type': 'float'},
        'spans': {'key': 'spans', 'type': '[DocumentSpan]'},
    }

    def __init__(
        self,
        *,
        doc_type: str,
        bounding_regions: List["BoundingRegion"],
        fields: Dict[str, "FieldValue"],
        confidence: float,
        spans: List["DocumentSpan"],
        **kwargs
    ):
        super(Document, self).__init__(**kwargs)
        self.doc_type = doc_type
        self.bounding_regions = bounding_regions
        self.fields = fields
        self.confidence = confidence
        self.spans = spans


class DocumentEntity(msrest.serialization.Model):
    """An object representing various categories of entities.

    All required parameters must be populated in order to send to Azure.

    :param category: Required. Entity type.
    :type category: str
    :param sub_category: Entity sub type.
    :type sub_category: str
    :param content: Required. Entity content.
    :type content: str
    :param bounding_regions: Required. Bounding regions covering the entity.
    :type bounding_regions: list[~azure.ai.formrecognizer.models.BoundingRegion]
    :param confidence: Required. Confidence of correctly extracting the entity.
    :type confidence: float
    :param spans: Required. Location of the entity in the reading order concatenated content.
    :type spans: list[~azure.ai.formrecognizer.models.DocumentSpan]
    """

    _validation = {
        'category': {'required': True},
        'content': {'required': True},
        'bounding_regions': {'required': True},
        'confidence': {'required': True, 'maximum': 1, 'minimum': 0},
        'spans': {'required': True},
    }

    _attribute_map = {
        'category': {'key': 'category', 'type': 'str'},
        'sub_category': {'key': 'subCategory', 'type': 'str'},
        'content': {'key': 'content', 'type': 'str'},
        'bounding_regions': {'key': 'boundingRegions', 'type': '[BoundingRegion]'},
        'confidence': {'key': 'confidence', 'type': 'float'},
        'spans': {'key': 'spans', 'type': '[DocumentSpan]'},
    }

    def __init__(
        self,
        *,
        category: str,
        content: str,
        bounding_regions: List["BoundingRegion"],
        confidence: float,
        spans: List["DocumentSpan"],
        sub_category: Optional[str] = None,
        **kwargs
    ):
        super(DocumentEntity, self).__init__(**kwargs)
        self.category = category
        self.sub_category = sub_category
        self.content = content
        self.bounding_regions = bounding_regions
        self.confidence = confidence
        self.spans = spans


class DocumentKeyValueElement(msrest.serialization.Model):
    """An object representing the field key or value in a key-value pair.

    All required parameters must be populated in order to send to Azure.

    :param content: Required. Concatenated content of the key-value element in reading order.
    :type content: str
    :param bounding_regions: Required. Bounding regions covering the key-value element.
    :type bounding_regions: list[~azure.ai.formrecognizer.models.BoundingRegion]
    :param spans: Required. Location of the key-value element in the reading order concatenated
     content.
    :type spans: list[~azure.ai.formrecognizer.models.DocumentSpan]
    """

    _validation = {
        'content': {'required': True},
        'bounding_regions': {'required': True},
        'spans': {'required': True},
    }

    _attribute_map = {
        'content': {'key': 'content', 'type': 'str'},
        'bounding_regions': {'key': 'boundingRegions', 'type': '[BoundingRegion]'},
        'spans': {'key': 'spans', 'type': '[DocumentSpan]'},
    }

    def __init__(
        self,
        *,
        content: str,
        bounding_regions: List["BoundingRegion"],
        spans: List["DocumentSpan"],
        **kwargs
    ):
        super(DocumentKeyValueElement, self).__init__(**kwargs)
        self.content = content
        self.bounding_regions = bounding_regions
        self.spans = spans


class DocumentKeyValuePair(msrest.serialization.Model):
    """An object representing a form field with distinct field label (key) and field value (may be empty).

    All required parameters must be populated in order to send to Azure.

    :param key: Required. Field label of the key-value pair.
    :type key: ~azure.ai.formrecognizer.models.DocumentKeyValueElement
    :param value: Required. Field value of the key-value pair.
    :type value: ~azure.ai.formrecognizer.models.DocumentKeyValueElement
    :param confidence: Required. Confidence of correctly extracting the key-value pair.
    :type confidence: float
    """

    _validation = {
        'key': {'required': True},
        'value': {'required': True},
        'confidence': {'required': True, 'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'key': {'key': 'key', 'type': 'DocumentKeyValueElement'},
        'value': {'key': 'value', 'type': 'DocumentKeyValueElement'},
        'confidence': {'key': 'confidence', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        key: "DocumentKeyValueElement",
        value: "DocumentKeyValueElement",
        confidence: float,
        **kwargs
    ):
        super(DocumentKeyValuePair, self).__init__(**kwargs)
        self.key = key
        self.value = value
        self.confidence = confidence


class DocumentLine(msrest.serialization.Model):
    """A content line object consisting of an adjacent sequence of content elements, such as words and selection marks.

    All required parameters must be populated in order to send to Azure.

    :param content: Required. Concatenated content of the contained elements in reading order.
    :type content: str
    :param bounding_box: Required. Bounding box of the line.
    :type bounding_box: list[float]
    :param spans: Required. Location of the line in the reading order concatenated content.
    :type spans: list[~azure.ai.formrecognizer.models.DocumentSpan]
    """

    _validation = {
        'content': {'required': True},
        'bounding_box': {'required': True, 'max_items': 8, 'min_items': 8},
        'spans': {'required': True},
    }

    _attribute_map = {
        'content': {'key': 'content', 'type': 'str'},
        'bounding_box': {'key': 'boundingBox', 'type': '[float]'},
        'spans': {'key': 'spans', 'type': '[DocumentSpan]'},
    }

    def __init__(
        self,
        *,
        content: str,
        bounding_box: List[float],
        spans: List["DocumentSpan"],
        **kwargs
    ):
        super(DocumentLine, self).__init__(**kwargs)
        self.content = content
        self.bounding_box = bounding_box
        self.spans = spans


class DocumentPage(msrest.serialization.Model):
    """Content and layout elements extracted from a page from the input.

    All required parameters must be populated in order to send to Azure.

    :param page_number: Required. 1-based page number in the input document.
    :type page_number: int
    :param angle: Required. The general orientation of the content in clockwise direction, measured
     in degrees between (-180, 180].
    :type angle: float
    :param width: Required. The width of the image/PDF in pixels/inches, respectively.
    :type width: float
    :param height: Required. The height of the image/PDF in pixels/inches, respectively.
    :type height: float
    :param unit: Required. The unit used by the width, height, and boundingBox properties. For
     images, the unit is "pixel". For PDF, the unit is "inch". Possible values include: "pixel",
     "inch".
    :type unit: str or ~azure.ai.formrecognizer.models.LengthUnit
    :param words: Required. Extracted words from the page.
    :type words: list[~azure.ai.formrecognizer.models.DocumentWord]
    :param selection_marks: Extracted selection marks from the page.
    :type selection_marks: list[~azure.ai.formrecognizer.models.DocumentSelectionMark]
    :param lines: Required. Extracted lines from the page, potentially containing both textual and
     visual elements.
    :type lines: list[~azure.ai.formrecognizer.models.DocumentLine]
    :param spans: Required. Location of the page in the reading order concatenated content.
    :type spans: list[~azure.ai.formrecognizer.models.DocumentSpan]
    """

    _validation = {
        'page_number': {'required': True, 'minimum': 1},
        'angle': {'required': True, 'maximum': 180, 'minimum_ex': -180},
        'width': {'required': True, 'minimum': 0},
        'height': {'required': True, 'minimum': 0},
        'unit': {'required': True},
        'words': {'required': True},
        'lines': {'required': True},
        'spans': {'required': True},
    }

    _attribute_map = {
        'page_number': {'key': 'pageNumber', 'type': 'int'},
        'angle': {'key': 'angle', 'type': 'float'},
        'width': {'key': 'width', 'type': 'float'},
        'height': {'key': 'height', 'type': 'float'},
        'unit': {'key': 'unit', 'type': 'str'},
        'words': {'key': 'words', 'type': '[DocumentWord]'},
        'selection_marks': {'key': 'selectionMarks', 'type': '[DocumentSelectionMark]'},
        'lines': {'key': 'lines', 'type': '[DocumentLine]'},
        'spans': {'key': 'spans', 'type': '[DocumentSpan]'},
    }

    def __init__(
        self,
        *,
        page_number: int,
        angle: float,
        width: float,
        height: float,
        unit: Union[str, "LengthUnit"],
        words: List["DocumentWord"],
        lines: List["DocumentLine"],
        spans: List["DocumentSpan"],
        selection_marks: Optional[List["DocumentSelectionMark"]] = None,
        **kwargs
    ):
        super(DocumentPage, self).__init__(**kwargs)
        self.page_number = page_number
        self.angle = angle
        self.width = width
        self.height = height
        self.unit = unit
        self.words = words
        self.selection_marks = selection_marks
        self.lines = lines
        self.spans = spans


class DocumentResult(msrest.serialization.Model):
    """A set of extracted fields corresponding to the input document.

    All required parameters must be populated in order to send to Azure.

    :param doc_type: Required. Document type.
    :type doc_type: str
    :param page_range: Required. First and last page number where the document is found.
    :type page_range: list[int]
    :param fields: Required. Dictionary of named field values.
    :type fields: dict[str, ~azure.ai.formrecognizer.models.FieldValueAutoGenerated]
    """

    _validation = {
        'doc_type': {'required': True},
        'page_range': {'required': True, 'max_items': 2, 'min_items': 2},
        'fields': {'required': True},
    }

    _attribute_map = {
        'doc_type': {'key': 'docType', 'type': 'str'},
        'page_range': {'key': 'pageRange', 'type': '[int]'},
        'fields': {'key': 'fields', 'type': '{FieldValueAutoGenerated}'},
    }

    def __init__(
        self,
        *,
        doc_type: str,
        page_range: List[int],
        fields: Dict[str, "FieldValueAutoGenerated"],
        **kwargs
    ):
        super(DocumentResult, self).__init__(**kwargs)
        self.doc_type = doc_type
        self.page_range = page_range
        self.fields = fields


class DocumentSelectionMark(msrest.serialization.Model):
    """A selection mark object representing check boxes, radio buttons, and other elements indicating a selection.

    All required parameters must be populated in order to send to Azure.

    :param state: Required. State of the selection mark. Possible values include: "selected",
     "unselected".
    :type state: str or ~azure.ai.formrecognizer.models.SelectionMarkState
    :param bounding_box: Required. Bounding box of the selection mark.
    :type bounding_box: list[float]
    :param confidence: Required. Confidence of correctly extracting the selection mark.
    :type confidence: float
    :param span: Required. Location of the selection mark in the reading order concatenated
     content.
    :type span: ~azure.ai.formrecognizer.models.DocumentSpan
    """

    _validation = {
        'state': {'required': True},
        'bounding_box': {'required': True, 'max_items': 8, 'min_items': 8},
        'confidence': {'required': True, 'maximum': 1, 'minimum': 0},
        'span': {'required': True},
    }

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
        'bounding_box': {'key': 'boundingBox', 'type': '[float]'},
        'confidence': {'key': 'confidence', 'type': 'float'},
        'span': {'key': 'span', 'type': 'DocumentSpan'},
    }

    def __init__(
        self,
        *,
        state: Union[str, "SelectionMarkState"],
        bounding_box: List[float],
        confidence: float,
        span: "DocumentSpan",
        **kwargs
    ):
        super(DocumentSelectionMark, self).__init__(**kwargs)
        self.state = state
        self.bounding_box = bounding_box
        self.confidence = confidence
        self.span = span


class DocumentSpan(msrest.serialization.Model):
    """Contiguous region of the concatenated content property, specified as an offset and length.

    All required parameters must be populated in order to send to Azure.

    :param offset: Required. Zero-based index of the content represented by the span.
    :type offset: int
    :param length: Required. Number of characters in the content represented by the span.
    :type length: int
    """

    _validation = {
        'offset': {'required': True, 'minimum': 0},
        'length': {'required': True, 'minimum': 0},
    }

    _attribute_map = {
        'offset': {'key': 'offset', 'type': 'int'},
        'length': {'key': 'length', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        offset: int,
        length: int,
        **kwargs
    ):
        super(DocumentSpan, self).__init__(**kwargs)
        self.offset = offset
        self.length = length


class DocumentStyle(msrest.serialization.Model):
    """An object representing observed text styles.

    All required parameters must be populated in order to send to Azure.

    :param is_handwritten: Is content handwritten?.
    :type is_handwritten: bool
    :param confidence: Confidence of correctly identifying the style.
    :type confidence: float
    :param spans: Required. Location of the text elements in the concatenated content the style
     applies to.
    :type spans: list[~azure.ai.formrecognizer.models.DocumentSpan]
    """

    _validation = {
        'confidence': {'maximum': 1, 'minimum': 0},
        'spans': {'required': True},
    }

    _attribute_map = {
        'is_handwritten': {'key': 'isHandwritten', 'type': 'bool'},
        'confidence': {'key': 'confidence', 'type': 'float'},
        'spans': {'key': 'spans', 'type': '[DocumentSpan]'},
    }

    def __init__(
        self,
        *,
        spans: List["DocumentSpan"],
        is_handwritten: Optional[bool] = None,
        confidence: Optional[float] = None,
        **kwargs
    ):
        super(DocumentStyle, self).__init__(**kwargs)
        self.is_handwritten = is_handwritten
        self.confidence = confidence
        self.spans = spans


class DocumentTable(msrest.serialization.Model):
    """A table object consisting table cells arranged in a rectangular layout.

    All required parameters must be populated in order to send to Azure.

    :param row_count: Required. Number of rows in the table.
    :type row_count: int
    :param column_count: Required. Number of columns in the table.
    :type column_count: int
    :param cells: Required. Cells contained within the table.
    :type cells: list[~azure.ai.formrecognizer.models.DocumentTableCell]
    :param bounding_regions: Required. Bounding regions covering the table.
    :type bounding_regions: list[~azure.ai.formrecognizer.models.BoundingRegion]
    :param spans: Required. Location of the table in the reading order concatenated content.
    :type spans: list[~azure.ai.formrecognizer.models.DocumentSpan]
    """

    _validation = {
        'row_count': {'required': True, 'minimum': 1},
        'column_count': {'required': True, 'minimum': 1},
        'cells': {'required': True},
        'bounding_regions': {'required': True},
        'spans': {'required': True},
    }

    _attribute_map = {
        'row_count': {'key': 'rowCount', 'type': 'int'},
        'column_count': {'key': 'columnCount', 'type': 'int'},
        'cells': {'key': 'cells', 'type': '[DocumentTableCell]'},
        'bounding_regions': {'key': 'boundingRegions', 'type': '[BoundingRegion]'},
        'spans': {'key': 'spans', 'type': '[DocumentSpan]'},
    }

    def __init__(
        self,
        *,
        row_count: int,
        column_count: int,
        cells: List["DocumentTableCell"],
        bounding_regions: List["BoundingRegion"],
        spans: List["DocumentSpan"],
        **kwargs
    ):
        super(DocumentTable, self).__init__(**kwargs)
        self.row_count = row_count
        self.column_count = column_count
        self.cells = cells
        self.bounding_regions = bounding_regions
        self.spans = spans


class DocumentTableCell(msrest.serialization.Model):
    """An object representing the location and content of a table cell.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required.  Possible values include: "content", "rowHeader", "columnHeader",
     "stub", "description". Default value: "content".
    :type kind: str or ~azure.ai.formrecognizer.models.DocumentTableCellKind
    :param row_index: Required. Row index of the cell.
    :type row_index: int
    :param column_index: Required. Column index of the cell.
    :type column_index: int
    :param row_span: Number of rows spanned by this cell.
    :type row_span: int
    :param column_span: Number of columns spanned by this cell.
    :type column_span: int
    :param content: Required. Concatenated content of the table cell in reading order.
    :type content: str
    :param bounding_regions: Required. Bounding regions covering the table cell.
    :type bounding_regions: list[~azure.ai.formrecognizer.models.BoundingRegion]
    :param spans: Required. Location of the table cell in the reading order concatenated content.
    :type spans: list[~azure.ai.formrecognizer.models.DocumentSpan]
    """

    _validation = {
        'kind': {'required': True},
        'row_index': {'required': True},
        'column_index': {'required': True},
        'row_span': {'minimum': 1},
        'column_span': {'minimum': 1},
        'content': {'required': True},
        'bounding_regions': {'required': True},
        'spans': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'row_index': {'key': 'rowIndex', 'type': 'int'},
        'column_index': {'key': 'columnIndex', 'type': 'int'},
        'row_span': {'key': 'rowSpan', 'type': 'int'},
        'column_span': {'key': 'columnSpan', 'type': 'int'},
        'content': {'key': 'content', 'type': 'str'},
        'bounding_regions': {'key': 'boundingRegions', 'type': '[BoundingRegion]'},
        'spans': {'key': 'spans', 'type': '[DocumentSpan]'},
    }

    def __init__(
        self,
        *,
        kind: Union[str, "DocumentTableCellKind"] = "content",
        row_index: int,
        column_index: int,
        content: str,
        bounding_regions: List["BoundingRegion"],
        spans: List["DocumentSpan"],
        row_span: Optional[int] = 1,
        column_span: Optional[int] = 1,
        **kwargs
    ):
        super(DocumentTableCell, self).__init__(**kwargs)
        self.kind = kind
        self.row_index = row_index
        self.column_index = column_index
        self.row_span = row_span
        self.column_span = column_span
        self.content = content
        self.bounding_regions = bounding_regions
        self.spans = spans


class DocumentWord(msrest.serialization.Model):
    """A word object consisting of a contiguous sequence of characters.  For non-space delimited languages, such as Chinese, Japanese, and Korean, each character is represented as its own word.

    All required parameters must be populated in order to send to Azure.

    :param text: Required. Text content of the word.
    :type text: str
    :param bounding_box: Required. Bounding box of the word.
    :type bounding_box: list[float]
    :param confidence: Required. Confidence of correctly extracting the word.
    :type confidence: float
    :param span: Required. Location of the word in the reading order concatenated content.
    :type span: ~azure.ai.formrecognizer.models.DocumentSpan
    """

    _validation = {
        'text': {'required': True},
        'bounding_box': {'required': True, 'max_items': 8, 'min_items': 8},
        'confidence': {'required': True, 'maximum': 1, 'minimum': 0},
        'span': {'required': True},
    }

    _attribute_map = {
        'text': {'key': 'text', 'type': 'str'},
        'bounding_box': {'key': 'boundingBox', 'type': '[float]'},
        'confidence': {'key': 'confidence', 'type': 'float'},
        'span': {'key': 'span', 'type': 'DocumentSpan'},
    }

    def __init__(
        self,
        *,
        text: str,
        bounding_box: List[float],
        confidence: float,
        span: "DocumentSpan",
        **kwargs
    ):
        super(DocumentWord, self).__init__(**kwargs)
        self.text = text
        self.bounding_box = bounding_box
        self.confidence = confidence
        self.span = span


class Error(msrest.serialization.Model):
    """Error info.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. Error code.
    :type code: str
    :param details:
    :type details: list[~azure.ai.formrecognizer.models.Error]
    :param innererror: Detailed error.
    :type innererror: ~azure.ai.formrecognizer.models.InnerError
    :param message: Required. Error message.
    :type message: str
    :param target: Target of the error.
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'details': {'key': 'details', 'type': '[Error]'},
        'innererror': {'key': 'innererror', 'type': 'InnerError'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        details: Optional[List["Error"]] = None,
        innererror: Optional["InnerError"] = None,
        target: Optional[str] = None,
        **kwargs
    ):
        super(Error, self).__init__(**kwargs)
        self.code = code
        self.details = details
        self.innererror = innererror
        self.message = message
        self.target = target


class ErrorInformation(msrest.serialization.Model):
    """ErrorInformation.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        **kwargs
    ):
        super(ErrorInformation, self).__init__(**kwargs)
        self.code = code
        self.message = message


class ErrorResponse(msrest.serialization.Model):
    """Error response object.

    All required parameters must be populated in order to send to Azure.

    :param error: Required. Error info.
    :type error: ~azure.ai.formrecognizer.models.Error
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'Error'},
    }

    def __init__(
        self,
        *,
        error: "Error",
        **kwargs
    ):
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class ErrorResponseAutoGenerated(msrest.serialization.Model):
    """ErrorResponseAutoGenerated.

    All required parameters must be populated in order to send to Azure.

    :param error: Required.
    :type error: ~azure.ai.formrecognizer.models.ErrorInformation
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorInformation'},
    }

    def __init__(
        self,
        *,
        error: "ErrorInformation",
        **kwargs
    ):
        super(ErrorResponseAutoGenerated, self).__init__(**kwargs)
        self.error = error


class FieldTypeSchema(msrest.serialization.Model):
    """Description of the field semantic schema using a JSON Schema style syntax.

    :param type: Field type. Possible values include: "string", "date", "time", "phoneNumber",
     "number", "integer", "selectionMark", "countryRegion", "currency", "signature", "array",
     "object".
    :type type: str or ~azure.ai.formrecognizer.models.FieldTypeSchemaType
    :param items: Field type schema of each array element.
    :type items: ~azure.ai.formrecognizer.models.FieldTypeSchema
    :param properties: Named sub-fields of the object field.
    :type properties: dict[str, ~azure.ai.formrecognizer.models.FieldTypeSchema]
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'items': {'key': 'items', 'type': 'FieldTypeSchema'},
        'properties': {'key': 'properties', 'type': '{FieldTypeSchema}'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "FieldTypeSchemaType"]] = None,
        items: Optional["FieldTypeSchema"] = None,
        properties: Optional[Dict[str, "FieldTypeSchema"]] = None,
        **kwargs
    ):
        super(FieldTypeSchema, self).__init__(**kwargs)
        self.type = type
        self.items = items
        self.properties = properties


class FieldValue(msrest.serialization.Model):
    """An object representing the content and location of a field value.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Data type of the field value. Possible values include: "string", "date",
     "time", "phoneNumber", "number", "integer", "array", "object", "selectionMark",
     "countryRegion", "currency", "signature".
    :type type: str or ~azure.ai.formrecognizer.models.FieldValueType
    :param value_string: String value.
    :type value_string: str
    :param value_date: Date value in YYYY-MM-DD format (ISO 8601).
    :type value_date: ~datetime.date
    :param value_time: Time value in hh:mm:ss format (ISO 8601).
    :type value_time: ~datetime.time
    :param value_phone_number: Phone number value in E.164 format (ex. +19876543210).
    :type value_phone_number: str
    :param value_number: Floating point value.
    :type value_number: float
    :param value_integer: Integer value.
    :type value_integer: int
    :param value_selection_mark: Selection mark value. Possible values include: "selected",
     "unselected".
    :type value_selection_mark: str or ~azure.ai.formrecognizer.models.SelectionMarkState
    :param value_signature: Presence of signature. Possible values include: "signed", "unsigned".
    :type value_signature: str or ~azure.ai.formrecognizer.models.DocumentSignatureType
    :param value_country_region: 3-letter country code value (ISO 3166-1 alpha-3).
    :type value_country_region: str
    :param value_currency: 3-letter currency code value (ISO 4217).
    :type value_currency: str
    :param value_array: Array of field values.
    :type value_array: list[~azure.ai.formrecognizer.models.FieldValue]
    :param value_object: Dictionary of named field values.
    :type value_object: dict[str, ~azure.ai.formrecognizer.models.FieldValue]
    :param content: Field content.
    :type content: str
    :param bounding_regions: Bounding regions covering the field.
    :type bounding_regions: list[~azure.ai.formrecognizer.models.BoundingRegion]
    :param confidence: Confidence of correctly extracting the field.
    :type confidence: float
    :param spans: Location of the field in the reading order concatenated content.
    :type spans: list[~azure.ai.formrecognizer.models.DocumentSpan]
    """

    _validation = {
        'type': {'required': True},
        'confidence': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'value_string': {'key': 'valueString', 'type': 'str'},
        'value_date': {'key': 'valueDate', 'type': 'date'},
        'value_time': {'key': 'valueTime', 'type': 'time'},
        'value_phone_number': {'key': 'valuePhoneNumber', 'type': 'str'},
        'value_number': {'key': 'valueNumber', 'type': 'float'},
        'value_integer': {'key': 'valueInteger', 'type': 'int'},
        'value_selection_mark': {'key': 'valueSelectionMark', 'type': 'str'},
        'value_signature': {'key': 'valueSignature', 'type': 'str'},
        'value_country_region': {'key': 'valueCountryRegion', 'type': 'str'},
        'value_currency': {'key': 'valueCurrency', 'type': 'str'},
        'value_array': {'key': 'valueArray', 'type': '[FieldValue]'},
        'value_object': {'key': 'valueObject', 'type': '{FieldValue}'},
        'content': {'key': 'content', 'type': 'str'},
        'bounding_regions': {'key': 'boundingRegions', 'type': '[BoundingRegion]'},
        'confidence': {'key': 'confidence', 'type': 'float'},
        'spans': {'key': 'spans', 'type': '[DocumentSpan]'},
    }

    def __init__(
        self,
        *,
        type: Union[str, "FieldValueType"],
        value_string: Optional[str] = None,
        value_date: Optional[datetime.date] = None,
        value_time: Optional[datetime.time] = None,
        value_phone_number: Optional[str] = None,
        value_number: Optional[float] = None,
        value_integer: Optional[int] = None,
        value_selection_mark: Optional[Union[str, "SelectionMarkState"]] = None,
        value_signature: Optional[Union[str, "DocumentSignatureType"]] = None,
        value_country_region: Optional[str] = None,
        value_currency: Optional[str] = None,
        value_array: Optional[List["FieldValue"]] = None,
        value_object: Optional[Dict[str, "FieldValue"]] = None,
        content: Optional[str] = None,
        bounding_regions: Optional[List["BoundingRegion"]] = None,
        confidence: Optional[float] = None,
        spans: Optional[List["DocumentSpan"]] = None,
        **kwargs
    ):
        super(FieldValue, self).__init__(**kwargs)
        self.type = type
        self.value_string = value_string
        self.value_date = value_date
        self.value_time = value_time
        self.value_phone_number = value_phone_number
        self.value_number = value_number
        self.value_integer = value_integer
        self.value_selection_mark = value_selection_mark
        self.value_signature = value_signature
        self.value_country_region = value_country_region
        self.value_currency = value_currency
        self.value_array = value_array
        self.value_object = value_object
        self.content = content
        self.bounding_regions = bounding_regions
        self.confidence = confidence
        self.spans = spans


class FieldValueAutoGenerated(msrest.serialization.Model):
    """Recognized field value.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Type of field value. Possible values include: "string", "date", "time",
     "phoneNumber", "number", "integer", "array", "object", "selectionMark", "countryRegion",
     "currency", "signature".
    :type type: str or ~azure.ai.formrecognizer.models.FieldValueType
    :param value_string: String value.
    :type value_string: str
    :param value_date: Date value.
    :type value_date: ~datetime.date
    :param value_time: Time value.
    :type value_time: ~datetime.time
    :param value_phone_number: Phone number value.
    :type value_phone_number: str
    :param value_number: Floating point value.
    :type value_number: float
    :param value_integer: Integer value.
    :type value_integer: int
    :param value_array: Array of field values.
    :type value_array: list[~azure.ai.formrecognizer.models.FieldValueAutoGenerated]
    :param value_object: Dictionary of named field values.
    :type value_object: dict[str, ~azure.ai.formrecognizer.models.FieldValueAutoGenerated]
    :param text: Text content of the extracted field.
    :type text: str
    :param bounding_box: Bounding box of the field value, if appropriate.
    :type bounding_box: list[float]
    :param confidence: Confidence score.
    :type confidence: float
    :param elements: When includeTextDetails is set to true, a list of references to the text
     elements constituting this field.
    :type elements: list[str]
    :param page: The 1-based page number in the input document.
    :type page: int
    """

    _validation = {
        'type': {'required': True},
        'bounding_box': {'max_items': 8, 'min_items': 8},
        'confidence': {'maximum': 1, 'minimum': 0},
        'page': {'minimum': 1},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'value_string': {'key': 'valueString', 'type': 'str'},
        'value_date': {'key': 'valueDate', 'type': 'date'},
        'value_time': {'key': 'valueTime', 'type': 'time'},
        'value_phone_number': {'key': 'valuePhoneNumber', 'type': 'str'},
        'value_number': {'key': 'valueNumber', 'type': 'float'},
        'value_integer': {'key': 'valueInteger', 'type': 'int'},
        'value_array': {'key': 'valueArray', 'type': '[FieldValueAutoGenerated]'},
        'value_object': {'key': 'valueObject', 'type': '{FieldValueAutoGenerated}'},
        'text': {'key': 'text', 'type': 'str'},
        'bounding_box': {'key': 'boundingBox', 'type': '[float]'},
        'confidence': {'key': 'confidence', 'type': 'float'},
        'elements': {'key': 'elements', 'type': '[str]'},
        'page': {'key': 'page', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        type: Union[str, "FieldValueType"],
        value_string: Optional[str] = None,
        value_date: Optional[datetime.date] = None,
        value_time: Optional[datetime.time] = None,
        value_phone_number: Optional[str] = None,
        value_number: Optional[float] = None,
        value_integer: Optional[int] = None,
        value_array: Optional[List["FieldValueAutoGenerated"]] = None,
        value_object: Optional[Dict[str, "FieldValueAutoGenerated"]] = None,
        text: Optional[str] = None,
        bounding_box: Optional[List[float]] = None,
        confidence: Optional[float] = None,
        elements: Optional[List[str]] = None,
        page: Optional[int] = None,
        **kwargs
    ):
        super(FieldValueAutoGenerated, self).__init__(**kwargs)
        self.type = type
        self.value_string = value_string
        self.value_date = value_date
        self.value_time = value_time
        self.value_phone_number = value_phone_number
        self.value_number = value_number
        self.value_integer = value_integer
        self.value_array = value_array
        self.value_object = value_object
        self.text = text
        self.bounding_box = bounding_box
        self.confidence = confidence
        self.elements = elements
        self.page = page


class FormFieldsReport(msrest.serialization.Model):
    """Report for a custom model training field.

    All required parameters must be populated in order to send to Azure.

    :param field_name: Required. Training field name.
    :type field_name: str
    :param accuracy: Required. Estimated extraction accuracy for this field.
    :type accuracy: float
    """

    _validation = {
        'field_name': {'required': True},
        'accuracy': {'required': True},
    }

    _attribute_map = {
        'field_name': {'key': 'fieldName', 'type': 'str'},
        'accuracy': {'key': 'accuracy', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        field_name: str,
        accuracy: float,
        **kwargs
    ):
        super(FormFieldsReport, self).__init__(**kwargs)
        self.field_name = field_name
        self.accuracy = accuracy


class InnerError(msrest.serialization.Model):
    """Detailed error.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. Error code.
    :type code: str
    :param innererror: Detailed error.
    :type innererror: ~azure.ai.formrecognizer.models.InnerError
    :param message: Error message.
    :type message: str
    """

    _validation = {
        'code': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'innererror': {'key': 'innererror', 'type': 'InnerError'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: str,
        innererror: Optional["InnerError"] = None,
        message: Optional[str] = None,
        **kwargs
    ):
        super(InnerError, self).__init__(**kwargs)
        self.code = code
        self.innererror = innererror
        self.message = message


class KeysResult(msrest.serialization.Model):
    """Keys extracted by the custom model.

    All required parameters must be populated in order to send to Azure.

    :param clusters: Required. Object mapping clusterIds to a list of keys.
    :type clusters: dict[str, list[str]]
    """

    _validation = {
        'clusters': {'required': True},
    }

    _attribute_map = {
        'clusters': {'key': 'clusters', 'type': '{[str]}'},
    }

    def __init__(
        self,
        *,
        clusters: Dict[str, List[str]],
        **kwargs
    ):
        super(KeysResult, self).__init__(**kwargs)
        self.clusters = clusters


class KeyValueElement(msrest.serialization.Model):
    """Information about the extracted key or value in a key-value pair.

    All required parameters must be populated in order to send to Azure.

    :param text: Required. The text content of the key or value.
    :type text: str
    :param bounding_box: Bounding box of the key or value.
    :type bounding_box: list[float]
    :param elements: When includeTextDetails is set to true, a list of references to the text
     elements constituting this key or value.
    :type elements: list[str]
    """

    _validation = {
        'text': {'required': True},
        'bounding_box': {'max_items': 8, 'min_items': 8},
    }

    _attribute_map = {
        'text': {'key': 'text', 'type': 'str'},
        'bounding_box': {'key': 'boundingBox', 'type': '[float]'},
        'elements': {'key': 'elements', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        text: str,
        bounding_box: Optional[List[float]] = None,
        elements: Optional[List[str]] = None,
        **kwargs
    ):
        super(KeyValueElement, self).__init__(**kwargs)
        self.text = text
        self.bounding_box = bounding_box
        self.elements = elements


class KeyValuePair(msrest.serialization.Model):
    """Information about the extracted key-value pair.

    All required parameters must be populated in order to send to Azure.

    :param label: A user defined label for the key/value pair entry.
    :type label: str
    :param key: Required. Information about the extracted key in a key-value pair.
    :type key: ~azure.ai.formrecognizer.models.KeyValueElement
    :param value: Required. Information about the extracted value in a key-value pair.
    :type value: ~azure.ai.formrecognizer.models.KeyValueElement
    :param confidence: Required. Confidence value.
    :type confidence: float
    """

    _validation = {
        'key': {'required': True},
        'value': {'required': True},
        'confidence': {'required': True, 'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'label': {'key': 'label', 'type': 'str'},
        'key': {'key': 'key', 'type': 'KeyValueElement'},
        'value': {'key': 'value', 'type': 'KeyValueElement'},
        'confidence': {'key': 'confidence', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        key: "KeyValueElement",
        value: "KeyValueElement",
        confidence: float,
        label: Optional[str] = None,
        **kwargs
    ):
        super(KeyValuePair, self).__init__(**kwargs)
        self.label = label
        self.key = key
        self.value = value
        self.confidence = confidence


class LocalContentSource(ContentSource):
    """Local storage content.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Source types.Constant filled by server.  Possible values include:
     "base64", "azure.blob", "local", "web".
    :type kind: str or ~azure.ai.formrecognizer.models.ContentSourceKind
    :param path: Required. Local path.
    :type path: str
    """

    _validation = {
        'kind': {'required': True},
        'path': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'path': {'key': 'path', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        path: str,
        **kwargs
    ):
        super(LocalContentSource, self).__init__(**kwargs)
        self.kind = 'local'  # type: str
        self.path = path


class Model(msrest.serialization.Model):
    """Response to the get custom model operation.

    All required parameters must be populated in order to send to Azure.

    :param model_info: Required. Basic custom model information.
    :type model_info: ~azure.ai.formrecognizer.models.ModelInfoAutoGenerated
    :param keys: Keys extracted by the custom model.
    :type keys: ~azure.ai.formrecognizer.models.KeysResult
    :param train_result: Custom model training result.
    :type train_result: ~azure.ai.formrecognizer.models.TrainResult
    """

    _validation = {
        'model_info': {'required': True},
    }

    _attribute_map = {
        'model_info': {'key': 'modelInfo', 'type': 'ModelInfoAutoGenerated'},
        'keys': {'key': 'keys', 'type': 'KeysResult'},
        'train_result': {'key': 'trainResult', 'type': 'TrainResult'},
    }

    def __init__(
        self,
        *,
        model_info: "ModelInfoAutoGenerated",
        keys: Optional["KeysResult"] = None,
        train_result: Optional["TrainResult"] = None,
        **kwargs
    ):
        super(Model, self).__init__(**kwargs)
        self.model_info = model_info
        self.keys = keys
        self.train_result = train_result


class ModelSummary(msrest.serialization.Model):
    """Model summary.

    All required parameters must be populated in order to send to Azure.

    :param model_id: Required. Unique model name.
    :type model_id: str
    :param description: Model description.
    :type description: str
    :param created_date_time: Required. Date and time (UTC) when the model was created.
    :type created_date_time: str
    """

    _validation = {
        'model_id': {'required': True},
        'description': {'max_length': 4096, 'min_length': 0},
        'created_date_time': {'required': True},
    }

    _attribute_map = {
        'model_id': {'key': 'modelId', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        model_id: str,
        created_date_time: str,
        description: Optional[str] = None,
        **kwargs
    ):
        super(ModelSummary, self).__init__(**kwargs)
        self.model_id = model_id
        self.description = description
        self.created_date_time = created_date_time


class ModelInfo(ModelSummary):
    """Model info.

    All required parameters must be populated in order to send to Azure.

    :param model_id: Required. Unique model name.
    :type model_id: str
    :param description: Model description.
    :type description: str
    :param created_date_time: Required. Date and time (UTC) when the model was created.
    :type created_date_time: str
    :param doc_types: Supported document types.
    :type doc_types: dict[str,
     ~azure.ai.formrecognizer.models.Components70NzpzSchemasModelinfoPropertiesDoctypesAdditionalproperties]
    """

    _validation = {
        'model_id': {'required': True},
        'description': {'max_length': 4096, 'min_length': 0},
        'created_date_time': {'required': True},
    }

    _attribute_map = {
        'model_id': {'key': 'modelId', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'str'},
        'doc_types': {'key': 'docTypes', 'type': '{Components70NzpzSchemasModelinfoPropertiesDoctypesAdditionalproperties}'},
    }

    def __init__(
        self,
        *,
        model_id: str,
        created_date_time: str,
        description: Optional[str] = None,
        doc_types: Optional[Dict[str, "Components70NzpzSchemasModelinfoPropertiesDoctypesAdditionalproperties"]] = None,
        **kwargs
    ):
        super(ModelInfo, self).__init__(model_id=model_id, description=description, created_date_time=created_date_time, **kwargs)
        self.doc_types = doc_types


class ModelInfoAutoGenerated(msrest.serialization.Model):
    """Basic custom model information.

    All required parameters must be populated in order to send to Azure.

    :param model_id: Required. Model identifier.
    :type model_id: str
    :param status: Required. Status of the model. Possible values include: "creating", "ready",
     "invalid".
    :type status: str or ~azure.ai.formrecognizer.models.ModelStatus
    :param created_date_time: Required. Date and time (UTC) when the model was created.
    :type created_date_time: ~datetime.datetime
    :param last_updated_date_time: Required. Date and time (UTC) when the status was last updated.
    :type last_updated_date_time: ~datetime.datetime
    """

    _validation = {
        'model_id': {'required': True},
        'status': {'required': True},
        'created_date_time': {'required': True},
        'last_updated_date_time': {'required': True},
    }

    _attribute_map = {
        'model_id': {'key': 'modelId', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_updated_date_time': {'key': 'lastUpdatedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        model_id: str,
        status: Union[str, "ModelStatus"],
        created_date_time: datetime.datetime,
        last_updated_date_time: datetime.datetime,
        **kwargs
    ):
        super(ModelInfoAutoGenerated, self).__init__(**kwargs)
        self.model_id = model_id
        self.status = status
        self.created_date_time = created_date_time
        self.last_updated_date_time = last_updated_date_time


class Models(msrest.serialization.Model):
    """Response to the list custom models operation.

    :param summary: Summary of all trained custom models.
    :type summary: ~azure.ai.formrecognizer.models.ModelsSummary
    :param model_list: Collection of trained custom models.
    :type model_list: list[~azure.ai.formrecognizer.models.ModelInfoAutoGenerated]
    :param next_link: Link to the next page of custom models.
    :type next_link: str
    """

    _attribute_map = {
        'summary': {'key': 'summary', 'type': 'ModelsSummary'},
        'model_list': {'key': 'modelList', 'type': '[ModelInfoAutoGenerated]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        summary: Optional["ModelsSummary"] = None,
        model_list: Optional[List["ModelInfoAutoGenerated"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(Models, self).__init__(**kwargs)
        self.summary = summary
        self.model_list = model_list
        self.next_link = next_link


class ModelsSummary(msrest.serialization.Model):
    """Summary of all trained custom models.

    All required parameters must be populated in order to send to Azure.

    :param count: Required. Current count of trained custom models.
    :type count: int
    :param limit: Required. Max number of models that can be trained for this account.
    :type limit: int
    :param last_updated_date_time: Required. Date and time (UTC) when the summary was last updated.
    :type last_updated_date_time: ~datetime.datetime
    """

    _validation = {
        'count': {'required': True},
        'limit': {'required': True},
        'last_updated_date_time': {'required': True},
    }

    _attribute_map = {
        'count': {'key': 'count', 'type': 'int'},
        'limit': {'key': 'limit', 'type': 'int'},
        'last_updated_date_time': {'key': 'lastUpdatedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        count: int,
        limit: int,
        last_updated_date_time: datetime.datetime,
        **kwargs
    ):
        super(ModelsSummary, self).__init__(**kwargs)
        self.count = count
        self.limit = limit
        self.last_updated_date_time = last_updated_date_time


class OperationInfo(msrest.serialization.Model):
    """Operation info.

    All required parameters must be populated in order to send to Azure.

    :param operation_id: Required. Operation ID.
    :type operation_id: str
    :param status: Required. Operation status. Possible values include: "notStarted", "running",
     "succeeded", "failed", "canceled".
    :type status: str or ~azure.ai.formrecognizer.models.OperationStatus
    :param created_date_time: Required. Date and time (UTC) when the model was created.
    :type created_date_time: str
    :param last_updated_date_time: Required. Date and time (UTC) when the status was last updated.
    :type last_updated_date_time: str
    :param kind: Type of operation. Possible values include: "documentModelBuild",
     "documentModelCompose", "documentModelCopyTo".
    :type kind: str or ~azure.ai.formrecognizer.models.OperationInfoKind
    :param resource_location: Required. URL of the resource targeted by this operation.
    :type resource_location: str
    """

    _validation = {
        'operation_id': {'required': True},
        'status': {'required': True},
        'created_date_time': {'required': True},
        'last_updated_date_time': {'required': True},
        'resource_location': {'required': True},
    }

    _attribute_map = {
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'str'},
        'last_updated_date_time': {'key': 'lastUpdatedDateTime', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'resource_location': {'key': 'resourceLocation', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        operation_id: str,
        status: Union[str, "OperationStatus"],
        created_date_time: str,
        last_updated_date_time: str,
        resource_location: str,
        kind: Optional[Union[str, "OperationInfoKind"]] = None,
        **kwargs
    ):
        super(OperationInfo, self).__init__(**kwargs)
        self.operation_id = operation_id
        self.status = status
        self.created_date_time = created_date_time
        self.last_updated_date_time = last_updated_date_time
        self.kind = kind
        self.resource_location = resource_location


class PageResult(msrest.serialization.Model):
    """Extracted information from a single page.

    All required parameters must be populated in order to send to Azure.

    :param page: Required. Page number.
    :type page: int
    :param cluster_id: Cluster identifier.
    :type cluster_id: int
    :param key_value_pairs: List of key-value pairs extracted from the page.
    :type key_value_pairs: list[~azure.ai.formrecognizer.models.KeyValuePair]
    :param tables: List of data tables extracted from the page.
    :type tables: list[~azure.ai.formrecognizer.models.DataTable]
    """

    _validation = {
        'page': {'required': True, 'minimum': 1},
        'cluster_id': {'minimum': 0},
    }

    _attribute_map = {
        'page': {'key': 'page', 'type': 'int'},
        'cluster_id': {'key': 'clusterId', 'type': 'int'},
        'key_value_pairs': {'key': 'keyValuePairs', 'type': '[KeyValuePair]'},
        'tables': {'key': 'tables', 'type': '[DataTable]'},
    }

    def __init__(
        self,
        *,
        page: int,
        cluster_id: Optional[int] = None,
        key_value_pairs: Optional[List["KeyValuePair"]] = None,
        tables: Optional[List["DataTable"]] = None,
        **kwargs
    ):
        super(PageResult, self).__init__(**kwargs)
        self.page = page
        self.cluster_id = cluster_id
        self.key_value_pairs = key_value_pairs
        self.tables = tables


class Paths10VzxpuDocumentmodelsBuildPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """Request body to build a new custom model.

    All required parameters must be populated in order to send to Azure.

    :param model_id: Required. Unique model name.
    :type model_id: str
    :param description: Model description.
    :type description: str
    :param technique: Required. Technique for building a custom model. Possible values include:
     "fixedTemplate-2021-07-30".
    :type technique: str or ~azure.ai.formrecognizer.models.DocumentModelBuildTechnique
    :param source: Required. Training data.
    :type source: ~azure.ai.formrecognizer.models.ContentSource
    """

    _validation = {
        'model_id': {'required': True},
        'description': {'max_length': 4096, 'min_length': 0},
        'technique': {'required': True},
        'source': {'required': True},
    }

    _attribute_map = {
        'model_id': {'key': 'modelId', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'technique': {'key': 'technique', 'type': 'str'},
        'source': {'key': 'source', 'type': 'ContentSource'},
    }

    def __init__(
        self,
        *,
        model_id: str,
        technique: Union[str, "DocumentModelBuildTechnique"],
        source: "ContentSource",
        description: Optional[str] = None,
        **kwargs
    ):
        super(Paths10VzxpuDocumentmodelsBuildPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.model_id = model_id
        self.description = description
        self.technique = technique
        self.source = source


class Paths12Yna0IDocumentmodelsModelidAnalyzePostRequestbodyContentImageJpegSchema(msrest.serialization.Model):
    """Document analysis parameters.

    :param source: Documents to analyze.
    :type source: ~azure.ai.formrecognizer.models.ContentSource
    """

    _attribute_map = {
        'source': {'key': 'source', 'type': 'ContentSource'},
    }

    def __init__(
        self,
        *,
        source: Optional["ContentSource"] = None,
        **kwargs
    ):
        super(Paths12Yna0IDocumentmodelsModelidAnalyzePostRequestbodyContentImageJpegSchema, self).__init__(**kwargs)
        self.source = source


class Paths1F37K28OperationsOperationidGetResponses200ContentApplicationJsonSchemaAllof1(msrest.serialization.Model):
    """Paths1F37K28OperationsOperationidGetResponses200ContentApplicationJsonSchemaAllof1.

    :param error: Encountered error.
    :type error: ~azure.ai.formrecognizer.models.Error
    :param result: Operation result upon success.
    :type result: any
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'Error'},
        'result': {'key': 'result', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        error: Optional["Error"] = None,
        result: Optional[Any] = None,
        **kwargs
    ):
        super(Paths1F37K28OperationsOperationidGetResponses200ContentApplicationJsonSchemaAllof1, self).__init__(**kwargs)
        self.error = error
        self.result = result


class Paths1A41EsjOperationsOperationidGetResponses200ContentApplicationJsonSchema(OperationInfo, Paths1F37K28OperationsOperationidGetResponses200ContentApplicationJsonSchemaAllof1):
    """Paths1A41EsjOperationsOperationidGetResponses200ContentApplicationJsonSchema.

    All required parameters must be populated in order to send to Azure.

    :param error: Encountered error.
    :type error: ~azure.ai.formrecognizer.models.Error
    :param result: Operation result upon success.
    :type result: any
    :param operation_id: Required. Operation ID.
    :type operation_id: str
    :param status: Required. Operation status. Possible values include: "notStarted", "running",
     "succeeded", "failed", "canceled".
    :type status: str or ~azure.ai.formrecognizer.models.OperationStatus
    :param created_date_time: Required. Date and time (UTC) when the model was created.
    :type created_date_time: str
    :param last_updated_date_time: Required. Date and time (UTC) when the status was last updated.
    :type last_updated_date_time: str
    :param kind: Type of operation. Possible values include: "documentModelBuild",
     "documentModelCompose", "documentModelCopyTo".
    :type kind: str or ~azure.ai.formrecognizer.models.OperationInfoKind
    :param resource_location: Required. URL of the resource targeted by this operation.
    :type resource_location: str
    """

    _validation = {
        'operation_id': {'required': True},
        'status': {'required': True},
        'created_date_time': {'required': True},
        'last_updated_date_time': {'required': True},
        'resource_location': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'Error'},
        'result': {'key': 'result', 'type': 'object'},
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'str'},
        'last_updated_date_time': {'key': 'lastUpdatedDateTime', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'resource_location': {'key': 'resourceLocation', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        operation_id: str,
        status: Union[str, "OperationStatus"],
        created_date_time: str,
        last_updated_date_time: str,
        resource_location: str,
        error: Optional["Error"] = None,
        result: Optional[Any] = None,
        kind: Optional[Union[str, "OperationInfoKind"]] = None,
        **kwargs
    ):
        super(Paths1A41EsjOperationsOperationidGetResponses200ContentApplicationJsonSchema, self).__init__(operation_id=operation_id, status=status, created_date_time=created_date_time, last_updated_date_time=last_updated_date_time, kind=kind, resource_location=resource_location, error=error, result=result, **kwargs)
        self.error = error
        self.result = result
        self.operation_id = operation_id
        self.status = status
        self.created_date_time = created_date_time
        self.last_updated_date_time = last_updated_date_time
        self.kind = kind
        self.resource_location = resource_location


class Paths1CndbjaDocumentmodelsGetResponses200ContentApplicationJsonSchema(msrest.serialization.Model):
    """Paths1CndbjaDocumentmodelsGetResponses200ContentApplicationJsonSchema.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. List of models.
    :type value: list[~azure.ai.formrecognizer.models.ModelSummary]
    :param next_link: Link to the next page of models.
    :type next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ModelSummary]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["ModelSummary"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(Paths1CndbjaDocumentmodelsGetResponses200ContentApplicationJsonSchema, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class Paths1D9IbxeInfoGetResponses200ContentApplicationJsonSchemaPropertiesCustomdocumentmodels(msrest.serialization.Model):
    """Paths1D9IbxeInfoGetResponses200ContentApplicationJsonSchemaPropertiesCustomdocumentmodels.

    All required parameters must be populated in order to send to Azure.

    :param count: Required. Number of custom models in the current resource.
    :type count: int
    :param limit: Required. Maximum number of custom models supported in the current resource.
    :type limit: int
    """

    _validation = {
        'count': {'required': True},
        'limit': {'required': True},
    }

    _attribute_map = {
        'count': {'key': 'count', 'type': 'int'},
        'limit': {'key': 'limit', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        count: int,
        limit: int,
        **kwargs
    ):
        super(Paths1D9IbxeInfoGetResponses200ContentApplicationJsonSchemaPropertiesCustomdocumentmodels, self).__init__(**kwargs)
        self.count = count
        self.limit = limit


class Paths1Ep1Fe8InfoGetResponses200ContentApplicationJsonSchema(msrest.serialization.Model):
    """Paths1Ep1Fe8InfoGetResponses200ContentApplicationJsonSchema.

    All required parameters must be populated in order to send to Azure.

    :param custom_document_models: Required.
    :type custom_document_models:
     ~azure.ai.formrecognizer.models.Paths1D9IbxeInfoGetResponses200ContentApplicationJsonSchemaPropertiesCustomdocumentmodels
    """

    _validation = {
        'custom_document_models': {'required': True},
    }

    _attribute_map = {
        'custom_document_models': {'key': 'customDocumentModels', 'type': 'Paths1D9IbxeInfoGetResponses200ContentApplicationJsonSchemaPropertiesCustomdocumentmodels'},
    }

    def __init__(
        self,
        *,
        custom_document_models: "Paths1D9IbxeInfoGetResponses200ContentApplicationJsonSchemaPropertiesCustomdocumentmodels",
        **kwargs
    ):
        super(Paths1Ep1Fe8InfoGetResponses200ContentApplicationJsonSchema, self).__init__(**kwargs)
        self.custom_document_models = custom_document_models


class Paths1Ln1VDocumentmodelsAuthorizecopyPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """Request body to authorize model copy.

    All required parameters must be populated in order to send to Azure.

    :param model_id: Required. Unique model name.
    :type model_id: str
    :param description: Model description.
    :type description: str
    """

    _validation = {
        'model_id': {'required': True},
        'description': {'max_length': 4096, 'min_length': 0},
    }

    _attribute_map = {
        'model_id': {'key': 'modelId', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        model_id: str,
        description: Optional[str] = None,
        **kwargs
    ):
        super(Paths1Ln1VDocumentmodelsAuthorizecopyPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.model_id = model_id
        self.description = description


class Paths1PlkkrbDocumentmodelsModelidAnalyzePostRequestbodyContentApplicationPdfSchema(msrest.serialization.Model):
    """Document analysis parameters.

    :param source: Documents to analyze.
    :type source: ~azure.ai.formrecognizer.models.ContentSource
    """

    _attribute_map = {
        'source': {'key': 'source', 'type': 'ContentSource'},
    }

    def __init__(
        self,
        *,
        source: Optional["ContentSource"] = None,
        **kwargs
    ):
        super(Paths1PlkkrbDocumentmodelsModelidAnalyzePostRequestbodyContentApplicationPdfSchema, self).__init__(**kwargs)
        self.source = source


class Paths1UuvhddDocumentmodelsModelidAnalyzePostRequestbodyContentImageBmpSchema(msrest.serialization.Model):
    """Document analysis parameters.

    :param source: Documents to analyze.
    :type source: ~azure.ai.formrecognizer.models.ContentSource
    """

    _attribute_map = {
        'source': {'key': 'source', 'type': 'ContentSource'},
    }

    def __init__(
        self,
        *,
        source: Optional["ContentSource"] = None,
        **kwargs
    ):
        super(Paths1UuvhddDocumentmodelsModelidAnalyzePostRequestbodyContentImageBmpSchema, self).__init__(**kwargs)
        self.source = source


class Paths5F1To2DocumentmodelsModelidAnalyzePostRequestbodyContentImageTiffSchema(msrest.serialization.Model):
    """Document analysis parameters.

    :param source: Documents to analyze.
    :type source: ~azure.ai.formrecognizer.models.ContentSource
    """

    _attribute_map = {
        'source': {'key': 'source', 'type': 'ContentSource'},
    }

    def __init__(
        self,
        *,
        source: Optional["ContentSource"] = None,
        **kwargs
    ):
        super(Paths5F1To2DocumentmodelsModelidAnalyzePostRequestbodyContentImageTiffSchema, self).__init__(**kwargs)
        self.source = source


class Paths8GtshoDocumentmodelsComposePostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """Request body to create a composed model from component models.

    All required parameters must be populated in order to send to Azure.

    :param model_id: Required. Unique model name.
    :type model_id: str
    :param description: Model description.
    :type description: str
    :param component_models: Required. List of component models to compose.
    :type component_models:
     list[~azure.ai.formrecognizer.models.PostContentSchemaComponentModelsItem]
    """

    _validation = {
        'model_id': {'required': True},
        'description': {'max_length': 4096, 'min_length': 0},
        'component_models': {'required': True, 'unique': True},
    }

    _attribute_map = {
        'model_id': {'key': 'modelId', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'component_models': {'key': 'componentModels', 'type': '[PostContentSchemaComponentModelsItem]'},
    }

    def __init__(
        self,
        *,
        model_id: str,
        component_models: List["PostContentSchemaComponentModelsItem"],
        description: Optional[str] = None,
        **kwargs
    ):
        super(Paths8GtshoDocumentmodelsComposePostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.model_id = model_id
        self.description = description
        self.component_models = component_models


class PathsNboob5DocumentmodelsModelidAnalyzePostRequestbodyContentImagePngSchema(msrest.serialization.Model):
    """Document analysis parameters.

    :param source: Documents to analyze.
    :type source: ~azure.ai.formrecognizer.models.ContentSource
    """

    _attribute_map = {
        'source': {'key': 'source', 'type': 'ContentSource'},
    }

    def __init__(
        self,
        *,
        source: Optional["ContentSource"] = None,
        **kwargs
    ):
        super(PathsNboob5DocumentmodelsModelidAnalyzePostRequestbodyContentImagePngSchema, self).__init__(**kwargs)
        self.source = source


class PathsOawoizDocumentmodelsModelidAnalyzePostRequestbodyContentApplicationOctetStreamSchema(msrest.serialization.Model):
    """Document analysis parameters.

    :param source: Documents to analyze.
    :type source: ~azure.ai.formrecognizer.models.ContentSource
    """

    _attribute_map = {
        'source': {'key': 'source', 'type': 'ContentSource'},
    }

    def __init__(
        self,
        *,
        source: Optional["ContentSource"] = None,
        **kwargs
    ):
        super(PathsOawoizDocumentmodelsModelidAnalyzePostRequestbodyContentApplicationOctetStreamSchema, self).__init__(**kwargs)
        self.source = source


class PathsXjehw4DocumentmodelsModelidAnalyzePostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """Document analysis parameters.

    :param source: Documents to analyze.
    :type source: ~azure.ai.formrecognizer.models.ContentSource
    """

    _attribute_map = {
        'source': {'key': 'source', 'type': 'ContentSource'},
    }

    def __init__(
        self,
        *,
        source: Optional["ContentSource"] = None,
        **kwargs
    ):
        super(PathsXjehw4DocumentmodelsModelidAnalyzePostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.source = source


class PathsY4MxprOperationsGetResponses200ContentApplicationJsonSchema(msrest.serialization.Model):
    """PathsY4MxprOperationsGetResponses200ContentApplicationJsonSchema.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. List of operations.
    :type value: list[~azure.ai.formrecognizer.models.OperationInfo]
    :param next_link: Link to the next page of operations.
    :type next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[OperationInfo]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["OperationInfo"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(PathsY4MxprOperationsGetResponses200ContentApplicationJsonSchema, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class PostContentSchemaComponentModelsItem(msrest.serialization.Model):
    """PostContentSchemaComponentModelsItem.

    All required parameters must be populated in order to send to Azure.

    :param model_id: Required. Unique model name.
    :type model_id: str
    """

    _validation = {
        'model_id': {'required': True},
    }

    _attribute_map = {
        'model_id': {'key': 'modelId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        model_id: str,
        **kwargs
    ):
        super(PostContentSchemaComponentModelsItem, self).__init__(**kwargs)
        self.model_id = model_id


class ReadResult(msrest.serialization.Model):
    """Text extracted from a page in the input document.

    All required parameters must be populated in order to send to Azure.

    :param page: Required. The 1-based page number in the input document.
    :type page: int
    :param angle: Required. The general orientation of the text in clockwise direction, measured in
     degrees between (-180, 180].
    :type angle: float
    :param width: Required. The width of the image/PDF in pixels/inches, respectively.
    :type width: float
    :param height: Required. The height of the image/PDF in pixels/inches, respectively.
    :type height: float
    :param unit: Required. The unit used by the width, height and boundingBox properties. For
     images, the unit is "pixel". For PDF, the unit is "inch". Possible values include: "pixel",
     "inch".
    :type unit: str or ~azure.ai.formrecognizer.models.LengthUnit
    :param language: The detected language on the page overall. Possible values include: "en",
     "es".
    :type language: str or ~azure.ai.formrecognizer.models.Language
    :param lines: When includeTextDetails is set to true, a list of recognized text lines. The
     maximum number of lines returned is 300 per page. The lines are sorted top to bottom, left to
     right, although in certain cases proximity is treated with higher priority. As the sorting
     order depends on the detected text, it may change across images and OCR version updates. Thus,
     business logic should be built upon the actual line location instead of order.
    :type lines: list[~azure.ai.formrecognizer.models.TextLine]
    """

    _validation = {
        'page': {'required': True, 'minimum': 1},
        'angle': {'required': True, 'maximum': 180, 'minimum_ex': -180},
        'width': {'required': True, 'minimum': 0},
        'height': {'required': True, 'minimum': 0},
        'unit': {'required': True},
    }

    _attribute_map = {
        'page': {'key': 'page', 'type': 'int'},
        'angle': {'key': 'angle', 'type': 'float'},
        'width': {'key': 'width', 'type': 'float'},
        'height': {'key': 'height', 'type': 'float'},
        'unit': {'key': 'unit', 'type': 'str'},
        'language': {'key': 'language', 'type': 'str'},
        'lines': {'key': 'lines', 'type': '[TextLine]'},
    }

    def __init__(
        self,
        *,
        page: int,
        angle: float,
        width: float,
        height: float,
        unit: Union[str, "LengthUnit"],
        language: Optional[Union[str, "Language"]] = None,
        lines: Optional[List["TextLine"]] = None,
        **kwargs
    ):
        super(ReadResult, self).__init__(**kwargs)
        self.page = page
        self.angle = angle
        self.width = width
        self.height = height
        self.unit = unit
        self.language = language
        self.lines = lines


class SourcePath(msrest.serialization.Model):
    """Uri or local path to source data.

    :param source: File source path.
    :type source: str
    """

    _validation = {
        'source': {'max_length': 2048, 'min_length': 0},
    }

    _attribute_map = {
        'source': {'key': 'source', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        source: Optional[str] = None,
        **kwargs
    ):
        super(SourcePath, self).__init__(**kwargs)
        self.source = source


class TextLine(msrest.serialization.Model):
    """An object representing an extracted text line.

    All required parameters must be populated in order to send to Azure.

    :param text: Required. The text content of the line.
    :type text: str
    :param bounding_box: Required. Bounding box of an extracted line.
    :type bounding_box: list[float]
    :param language: The detected language of this line, if different from the overall page
     language. Possible values include: "en", "es".
    :type language: str or ~azure.ai.formrecognizer.models.Language
    :param words: Required. List of words in the text line.
    :type words: list[~azure.ai.formrecognizer.models.TextWord]
    """

    _validation = {
        'text': {'required': True},
        'bounding_box': {'required': True, 'max_items': 8, 'min_items': 8},
        'words': {'required': True},
    }

    _attribute_map = {
        'text': {'key': 'text', 'type': 'str'},
        'bounding_box': {'key': 'boundingBox', 'type': '[float]'},
        'language': {'key': 'language', 'type': 'str'},
        'words': {'key': 'words', 'type': '[TextWord]'},
    }

    def __init__(
        self,
        *,
        text: str,
        bounding_box: List[float],
        words: List["TextWord"],
        language: Optional[Union[str, "Language"]] = None,
        **kwargs
    ):
        super(TextLine, self).__init__(**kwargs)
        self.text = text
        self.bounding_box = bounding_box
        self.language = language
        self.words = words


class TextWord(msrest.serialization.Model):
    """An object representing a word.

    All required parameters must be populated in order to send to Azure.

    :param text: Required. The text content of the word.
    :type text: str
    :param bounding_box: Required. Bounding box of an extracted word.
    :type bounding_box: list[float]
    :param confidence: Confidence value.
    :type confidence: float
    """

    _validation = {
        'text': {'required': True},
        'bounding_box': {'required': True, 'max_items': 8, 'min_items': 8},
        'confidence': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'text': {'key': 'text', 'type': 'str'},
        'bounding_box': {'key': 'boundingBox', 'type': '[float]'},
        'confidence': {'key': 'confidence', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        text: str,
        bounding_box: List[float],
        confidence: Optional[float] = None,
        **kwargs
    ):
        super(TextWord, self).__init__(**kwargs)
        self.text = text
        self.bounding_box = bounding_box
        self.confidence = confidence


class TrainingDocumentInfo(msrest.serialization.Model):
    """Report for a custom model training document.

    All required parameters must be populated in order to send to Azure.

    :param document_name: Required. Training document name.
    :type document_name: str
    :param pages: Required. Total number of pages trained.
    :type pages: int
    :param errors: Required. List of errors.
    :type errors: list[~azure.ai.formrecognizer.models.ErrorInformation]
    :param status: Required. Status of the training operation. Possible values include:
     "succeeded", "partiallySucceeded", "failed".
    :type status: str or ~azure.ai.formrecognizer.models.TrainStatus
    """

    _validation = {
        'document_name': {'required': True},
        'pages': {'required': True},
        'errors': {'required': True},
        'status': {'required': True},
    }

    _attribute_map = {
        'document_name': {'key': 'documentName', 'type': 'str'},
        'pages': {'key': 'pages', 'type': 'int'},
        'errors': {'key': 'errors', 'type': '[ErrorInformation]'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        document_name: str,
        pages: int,
        errors: List["ErrorInformation"],
        status: Union[str, "TrainStatus"],
        **kwargs
    ):
        super(TrainingDocumentInfo, self).__init__(**kwargs)
        self.document_name = document_name
        self.pages = pages
        self.errors = errors
        self.status = status


class TrainRequest(msrest.serialization.Model):
    """Request parameter to train a new custom model.

    All required parameters must be populated in order to send to Azure.

    :param source: Required. Source path containing the training documents.
    :type source: str
    :param source_filter: Filter to apply to the documents in the source path for training.
    :type source_filter: ~azure.ai.formrecognizer.models.TrainSourceFilter
    :param use_label_file: Use label file for training a model.
    :type use_label_file: bool
    """

    _validation = {
        'source': {'required': True, 'max_length': 2048, 'min_length': 0},
    }

    _attribute_map = {
        'source': {'key': 'source', 'type': 'str'},
        'source_filter': {'key': 'sourceFilter', 'type': 'TrainSourceFilter'},
        'use_label_file': {'key': 'useLabelFile', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        source: str,
        source_filter: Optional["TrainSourceFilter"] = None,
        use_label_file: Optional[bool] = False,
        **kwargs
    ):
        super(TrainRequest, self).__init__(**kwargs)
        self.source = source
        self.source_filter = source_filter
        self.use_label_file = use_label_file


class TrainResult(msrest.serialization.Model):
    """Custom model training result.

    All required parameters must be populated in order to send to Azure.

    :param training_documents: Required. List of the documents used to train the model and any
     errors reported in each document.
    :type training_documents: list[~azure.ai.formrecognizer.models.TrainingDocumentInfo]
    :param fields: List of fields used to train the model and the train operation error reported by
     each.
    :type fields: list[~azure.ai.formrecognizer.models.FormFieldsReport]
    :param average_model_accuracy: Average accuracy.
    :type average_model_accuracy: float
    :param errors: Errors returned during the training operation.
    :type errors: list[~azure.ai.formrecognizer.models.ErrorInformation]
    """

    _validation = {
        'training_documents': {'required': True},
    }

    _attribute_map = {
        'training_documents': {'key': 'trainingDocuments', 'type': '[TrainingDocumentInfo]'},
        'fields': {'key': 'fields', 'type': '[FormFieldsReport]'},
        'average_model_accuracy': {'key': 'averageModelAccuracy', 'type': 'float'},
        'errors': {'key': 'errors', 'type': '[ErrorInformation]'},
    }

    def __init__(
        self,
        *,
        training_documents: List["TrainingDocumentInfo"],
        fields: Optional[List["FormFieldsReport"]] = None,
        average_model_accuracy: Optional[float] = None,
        errors: Optional[List["ErrorInformation"]] = None,
        **kwargs
    ):
        super(TrainResult, self).__init__(**kwargs)
        self.training_documents = training_documents
        self.fields = fields
        self.average_model_accuracy = average_model_accuracy
        self.errors = errors


class TrainSourceFilter(msrest.serialization.Model):
    """Filter to apply to the documents in the source path for training.

    :param prefix: A case-sensitive prefix string to filter documents in the source path for
     training. For example, when using a Azure storage blob Uri, use the prefix to restrict sub
     folders for training.
    :type prefix: str
    :param include_sub_folders: A flag to indicate if sub folders within the set of prefix folders
     will also need to be included when searching for content to be preprocessed.
    :type include_sub_folders: bool
    """

    _validation = {
        'prefix': {'max_length': 1024, 'min_length': 0},
    }

    _attribute_map = {
        'prefix': {'key': 'prefix', 'type': 'str'},
        'include_sub_folders': {'key': 'includeSubFolders', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        prefix: Optional[str] = None,
        include_sub_folders: Optional[bool] = False,
        **kwargs
    ):
        super(TrainSourceFilter, self).__init__(**kwargs)
        self.prefix = prefix
        self.include_sub_folders = include_sub_folders


class WebContentSource(ContentSource):
    """Publicly accessible Internet content.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Source types.Constant filled by server.  Possible values include:
     "base64", "azure.blob", "local", "web".
    :type kind: str or ~azure.ai.formrecognizer.models.ContentSourceKind
    :param url: Required. Publicly accessible URL.
    :type url: str
    """

    _validation = {
        'kind': {'required': True},
        'url': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'url': {'key': 'url', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        url: str,
        **kwargs
    ):
        super(WebContentSource, self).__init__(**kwargs)
        self.kind = 'web'  # type: str
        self.url = url
